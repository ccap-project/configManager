package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Provider provider
// swagger:model Provider
type Provider struct {

	// auth url
	// Required: true
	AuthURL *string `json:"auth_url"`

	// domain name
	// Required: true
	DomainName *string `json:"domain_name"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	// Required: true
	Password *string `json:"password"`

	// providertype id
	// Required: true
	ProvidertypeID *int64 `json:"providertype_id"`

	// tenant name
	// Required: true
	TenantName *string `json:"tenant_name"`

	// type
	Type string `json:"type,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this provider
func (m *Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomainName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvidertypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Provider) validateAuthURL(formats strfmt.Registry) error {

	if err := validate.Required("auth_url", "body", m.AuthURL); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateDomainName(formats strfmt.Registry) error {

	if err := validate.Required("domain_name", "body", m.DomainName); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateProvidertypeID(formats strfmt.Registry) error {

	if err := validate.Required("providertype_id", "body", m.ProvidertypeID); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateTenantName(formats strfmt.Registry) error {

	if err := validate.Required("tenant_name", "body", m.TenantName); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Provider) UnmarshalBinary(b []byte) error {
	var res Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
