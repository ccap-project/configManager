// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"configManager/models"
	"configManager/restapi/operations/cell"
	"configManager/restapi/operations/component"
	"configManager/restapi/operations/customer"
	"configManager/restapi/operations/host"
	"configManager/restapi/operations/hostgroup"
	"configManager/restapi/operations/keypair"
	"configManager/restapi/operations/provider"
	"configManager/restapi/operations/providertype"
	"configManager/restapi/operations/role"
)

// NewConfigManagerAPI creates a new ConfigManager instance
func NewConfigManagerAPI(spec *loads.Document) *ConfigManagerAPI {
	return &ConfigManagerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		UrlformConsumer:     runtime.DiscardConsumer,
		JSONProducer:        runtime.JSONProducer(),
		HostgroupAddComponentHostgroupHandler: hostgroup.AddComponentHostgroupHandlerFunc(func(params hostgroup.AddComponentHostgroupParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostgroupAddComponentHostgroup has not yet been implemented")
		}),
		HostgroupDeleteComponentHostgroupHandler: hostgroup.DeleteComponentHostgroupHandlerFunc(func(params hostgroup.DeleteComponentHostgroupParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostgroupDeleteComponentHostgroup has not yet been implemented")
		}),
		HostgroupUpdateComponentHostgroupHandler: hostgroup.UpdateComponentHostgroupHandlerFunc(func(params hostgroup.UpdateComponentHostgroupParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostgroupUpdateComponentHostgroup has not yet been implemented")
		}),
		CellAddCellHandler: cell.AddCellHandlerFunc(func(params cell.AddCellParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellAddCell has not yet been implemented")
		}),
		HostAddCellHostHandler: host.AddCellHostHandlerFunc(func(params host.AddCellHostParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostAddCellHost has not yet been implemented")
		}),
		KeypairAddCellKeypairHandler: keypair.AddCellKeypairHandlerFunc(func(params keypair.AddCellKeypairParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairAddCellKeypair has not yet been implemented")
		}),
		ComponentAddComponentHandler: component.AddComponentHandlerFunc(func(params component.AddComponentParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ComponentAddComponent has not yet been implemented")
		}),
		RoleAddComponentRoleHandler: role.AddComponentRoleHandlerFunc(func(params role.AddComponentRoleParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation RoleAddComponentRole has not yet been implemented")
		}),
		CustomerAddCustomerHandler: customer.AddCustomerHandlerFunc(func(params customer.AddCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerAddCustomer has not yet been implemented")
		}),
		KeypairAddKeypairHandler: keypair.AddKeypairHandlerFunc(func(params keypair.AddKeypairParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairAddKeypair has not yet been implemented")
		}),
		ProviderAddProviderHandler: provider.AddProviderHandlerFunc(func(params provider.AddProviderParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ProviderAddProvider has not yet been implemented")
		}),
		ProvidertypeAddProviderTypeHandler: providertype.AddProviderTypeHandlerFunc(func(params providertype.AddProviderTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ProvidertypeAddProviderType has not yet been implemented")
		}),
		CellDeleteCellHandler: cell.DeleteCellHandlerFunc(func(params cell.DeleteCellParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellDeleteCell has not yet been implemented")
		}),
		RoleDeleteComponentRoleHandler: role.DeleteComponentRoleHandlerFunc(func(params role.DeleteComponentRoleParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation RoleDeleteComponentRole has not yet been implemented")
		}),
		CustomerDeleteCustomerHandler: customer.DeleteCustomerHandlerFunc(func(params customer.DeleteCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerDeleteCustomer has not yet been implemented")
		}),
		KeypairDeleteKeypairHandler: keypair.DeleteKeypairHandlerFunc(func(params keypair.DeleteKeypairParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairDeleteKeypair has not yet been implemented")
		}),
		ProvidertypeDeleteProviderTypeHandler: providertype.DeleteProviderTypeHandlerFunc(func(params providertype.DeleteProviderTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ProvidertypeDeleteProviderType has not yet been implemented")
		}),
		CellDeployCellAppByIDHandler: cell.DeployCellAppByIDHandlerFunc(func(params cell.DeployCellAppByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellDeployCellAppByID has not yet been implemented")
		}),
		CellDeployCellByIDHandler: cell.DeployCellByIDHandlerFunc(func(params cell.DeployCellByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellDeployCellByID has not yet been implemented")
		}),
		CellFindCellByCustomerHandler: cell.FindCellByCustomerHandlerFunc(func(params cell.FindCellByCustomerParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellFindCellByCustomer has not yet been implemented")
		}),
		ComponentFindCellComponentsHandler: component.FindCellComponentsHandlerFunc(func(params component.FindCellComponentsParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ComponentFindCellComponents has not yet been implemented")
		}),
		HostFindCellHostsHandler: host.FindCellHostsHandlerFunc(func(params host.FindCellHostsParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostFindCellHosts has not yet been implemented")
		}),
		HostgroupFindComponentHostgroupsHandler: hostgroup.FindComponentHostgroupsHandlerFunc(func(params hostgroup.FindComponentHostgroupsParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostgroupFindComponentHostgroups has not yet been implemented")
		}),
		RoleFindComponentRolesHandler: role.FindComponentRolesHandlerFunc(func(params role.FindComponentRolesParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation RoleFindComponentRoles has not yet been implemented")
		}),
		CustomerFindCustomerByNameHandler: customer.FindCustomerByNameHandlerFunc(func(params customer.FindCustomerByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerFindCustomerByName has not yet been implemented")
		}),
		KeypairFindKeypairByCustomerHandler: keypair.FindKeypairByCustomerHandlerFunc(func(params keypair.FindKeypairByCustomerParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairFindKeypairByCustomer has not yet been implemented")
		}),
		CellGetCellByIDHandler: cell.GetCellByIDHandlerFunc(func(params cell.GetCellByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellGetCellByID has not yet been implemented")
		}),
		ComponentGetCellComponentHandler: component.GetCellComponentHandlerFunc(func(params component.GetCellComponentParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetCellComponent has not yet been implemented")
		}),
		CellGetCellFullByIDHandler: cell.GetCellFullByIDHandlerFunc(func(params cell.GetCellFullByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellGetCellFullByID has not yet been implemented")
		}),
		HostgroupGetComponentHostgroupByIDHandler: hostgroup.GetComponentHostgroupByIDHandlerFunc(func(params hostgroup.GetComponentHostgroupByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation HostgroupGetComponentHostgroupByID has not yet been implemented")
		}),
		CustomerGetCustomerByIDHandler: customer.GetCustomerByIDHandlerFunc(func(params customer.GetCustomerByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerGetCustomerByID has not yet been implemented")
		}),
		KeypairGetKeypairByIDHandler: keypair.GetKeypairByIDHandlerFunc(func(params keypair.GetKeypairByIDParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairGetKeypairByID has not yet been implemented")
		}),
		ProviderGetProviderHandler: provider.GetProviderHandlerFunc(func(params provider.GetProviderParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ProviderGetProvider has not yet been implemented")
		}),
		ProvidertypeGetProviderTypeByIDHandler: providertype.GetProviderTypeByIDHandlerFunc(func(params providertype.GetProviderTypeByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ProvidertypeGetProviderTypeByID has not yet been implemented")
		}),
		ProvidertypeListProviderTypesHandler: providertype.ListProviderTypesHandlerFunc(func(params providertype.ListProviderTypesParams) middleware.Responder {
			return middleware.NotImplemented("operation ProvidertypeListProviderTypes has not yet been implemented")
		}),
		CellUpdateCellWithFormHandler: cell.UpdateCellWithFormHandlerFunc(func(params cell.UpdateCellWithFormParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation CellUpdateCellWithForm has not yet been implemented")
		}),
		RoleUpdateComponentRoleHandler: role.UpdateComponentRoleHandlerFunc(func(params role.UpdateComponentRoleParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation RoleUpdateComponentRole has not yet been implemented")
		}),
		CustomerUpdateCustomerHandler: customer.UpdateCustomerHandlerFunc(func(params customer.UpdateCustomerParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerUpdateCustomer has not yet been implemented")
		}),
		CustomerUpdateCustomerWithFormHandler: customer.UpdateCustomerWithFormHandlerFunc(func(params customer.UpdateCustomerWithFormParams) middleware.Responder {
			return middleware.NotImplemented("operation CustomerUpdateCustomerWithForm has not yet been implemented")
		}),
		KeypairUpdateKeypairHandler: keypair.UpdateKeypairHandlerFunc(func(params keypair.UpdateKeypairParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairUpdateKeypair has not yet been implemented")
		}),
		KeypairUpdateKeypairWithFormHandler: keypair.UpdateKeypairWithFormHandlerFunc(func(params keypair.UpdateKeypairWithFormParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation KeypairUpdateKeypairWithForm has not yet been implemented")
		}),
		ProviderUpdateProviderHandler: provider.UpdateProviderHandlerFunc(func(params provider.UpdateProviderParams, principal *models.Customer) middleware.Responder {
			return middleware.NotImplemented("operation ProviderUpdateProvider has not yet been implemented")
		}),
		ProvidertypeUpdateProviderTypeHandler: providertype.UpdateProviderTypeHandlerFunc(func(params providertype.UpdateProviderTypeParams) middleware.Responder {
			return middleware.NotImplemented("operation ProvidertypeUpdateProviderType has not yet been implemented")
		}),

		// Applies when the "x-api-token" header is set
		APIKeyHeaderAuth: func(token string) (*models.Customer, error) {
			return nil, errors.NotImplemented("api key auth (APIKeyHeader) x-api-token from header param [x-api-token] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ConfigManagerAPI the config manager API */
type ConfigManagerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for a "application/x-www-form-urlencoded" mime type
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// APIKeyHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-api-token provided in the header
	APIKeyHeaderAuth func(string) (*models.Customer, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// HostgroupAddComponentHostgroupHandler sets the operation handler for the add component hostgroup operation
	HostgroupAddComponentHostgroupHandler hostgroup.AddComponentHostgroupHandler
	// HostgroupDeleteComponentHostgroupHandler sets the operation handler for the delete component hostgroup operation
	HostgroupDeleteComponentHostgroupHandler hostgroup.DeleteComponentHostgroupHandler
	// HostgroupUpdateComponentHostgroupHandler sets the operation handler for the update component hostgroup operation
	HostgroupUpdateComponentHostgroupHandler hostgroup.UpdateComponentHostgroupHandler
	// CellAddCellHandler sets the operation handler for the add cell operation
	CellAddCellHandler cell.AddCellHandler
	// HostAddCellHostHandler sets the operation handler for the add cell host operation
	HostAddCellHostHandler host.AddCellHostHandler
	// KeypairAddCellKeypairHandler sets the operation handler for the add cell keypair operation
	KeypairAddCellKeypairHandler keypair.AddCellKeypairHandler
	// ComponentAddComponentHandler sets the operation handler for the add component operation
	ComponentAddComponentHandler component.AddComponentHandler
	// RoleAddComponentRoleHandler sets the operation handler for the add component role operation
	RoleAddComponentRoleHandler role.AddComponentRoleHandler
	// CustomerAddCustomerHandler sets the operation handler for the add customer operation
	CustomerAddCustomerHandler customer.AddCustomerHandler
	// KeypairAddKeypairHandler sets the operation handler for the add keypair operation
	KeypairAddKeypairHandler keypair.AddKeypairHandler
	// ProviderAddProviderHandler sets the operation handler for the add provider operation
	ProviderAddProviderHandler provider.AddProviderHandler
	// ProvidertypeAddProviderTypeHandler sets the operation handler for the add provider type operation
	ProvidertypeAddProviderTypeHandler providertype.AddProviderTypeHandler
	// CellDeleteCellHandler sets the operation handler for the delete cell operation
	CellDeleteCellHandler cell.DeleteCellHandler
	// RoleDeleteComponentRoleHandler sets the operation handler for the delete component role operation
	RoleDeleteComponentRoleHandler role.DeleteComponentRoleHandler
	// CustomerDeleteCustomerHandler sets the operation handler for the delete customer operation
	CustomerDeleteCustomerHandler customer.DeleteCustomerHandler
	// KeypairDeleteKeypairHandler sets the operation handler for the delete keypair operation
	KeypairDeleteKeypairHandler keypair.DeleteKeypairHandler
	// ProvidertypeDeleteProviderTypeHandler sets the operation handler for the delete provider type operation
	ProvidertypeDeleteProviderTypeHandler providertype.DeleteProviderTypeHandler
	// CellDeployCellAppByIDHandler sets the operation handler for the deploy cell app by Id operation
	CellDeployCellAppByIDHandler cell.DeployCellAppByIDHandler
	// CellDeployCellByIDHandler sets the operation handler for the deploy cell by Id operation
	CellDeployCellByIDHandler cell.DeployCellByIDHandler
	// CellFindCellByCustomerHandler sets the operation handler for the find cell by customer operation
	CellFindCellByCustomerHandler cell.FindCellByCustomerHandler
	// ComponentFindCellComponentsHandler sets the operation handler for the find cell components operation
	ComponentFindCellComponentsHandler component.FindCellComponentsHandler
	// HostFindCellHostsHandler sets the operation handler for the find cell hosts operation
	HostFindCellHostsHandler host.FindCellHostsHandler
	// HostgroupFindComponentHostgroupsHandler sets the operation handler for the find component hostgroups operation
	HostgroupFindComponentHostgroupsHandler hostgroup.FindComponentHostgroupsHandler
	// RoleFindComponentRolesHandler sets the operation handler for the find component roles operation
	RoleFindComponentRolesHandler role.FindComponentRolesHandler
	// CustomerFindCustomerByNameHandler sets the operation handler for the find customer by name operation
	CustomerFindCustomerByNameHandler customer.FindCustomerByNameHandler
	// KeypairFindKeypairByCustomerHandler sets the operation handler for the find keypair by customer operation
	KeypairFindKeypairByCustomerHandler keypair.FindKeypairByCustomerHandler
	// CellGetCellByIDHandler sets the operation handler for the get cell by Id operation
	CellGetCellByIDHandler cell.GetCellByIDHandler
	// ComponentGetCellComponentHandler sets the operation handler for the get cell component operation
	ComponentGetCellComponentHandler component.GetCellComponentHandler
	// CellGetCellFullByIDHandler sets the operation handler for the get cell full by Id operation
	CellGetCellFullByIDHandler cell.GetCellFullByIDHandler
	// HostgroupGetComponentHostgroupByIDHandler sets the operation handler for the get component hostgroup by ID operation
	HostgroupGetComponentHostgroupByIDHandler hostgroup.GetComponentHostgroupByIDHandler
	// CustomerGetCustomerByIDHandler sets the operation handler for the get customer by Id operation
	CustomerGetCustomerByIDHandler customer.GetCustomerByIDHandler
	// KeypairGetKeypairByIDHandler sets the operation handler for the get keypair by Id operation
	KeypairGetKeypairByIDHandler keypair.GetKeypairByIDHandler
	// ProviderGetProviderHandler sets the operation handler for the get provider operation
	ProviderGetProviderHandler provider.GetProviderHandler
	// ProvidertypeGetProviderTypeByIDHandler sets the operation handler for the get provider type by Id operation
	ProvidertypeGetProviderTypeByIDHandler providertype.GetProviderTypeByIDHandler
	// ProvidertypeListProviderTypesHandler sets the operation handler for the list provider types operation
	ProvidertypeListProviderTypesHandler providertype.ListProviderTypesHandler
	// CellUpdateCellWithFormHandler sets the operation handler for the update cell with form operation
	CellUpdateCellWithFormHandler cell.UpdateCellWithFormHandler
	// RoleUpdateComponentRoleHandler sets the operation handler for the update component role operation
	RoleUpdateComponentRoleHandler role.UpdateComponentRoleHandler
	// CustomerUpdateCustomerHandler sets the operation handler for the update customer operation
	CustomerUpdateCustomerHandler customer.UpdateCustomerHandler
	// CustomerUpdateCustomerWithFormHandler sets the operation handler for the update customer with form operation
	CustomerUpdateCustomerWithFormHandler customer.UpdateCustomerWithFormHandler
	// KeypairUpdateKeypairHandler sets the operation handler for the update keypair operation
	KeypairUpdateKeypairHandler keypair.UpdateKeypairHandler
	// KeypairUpdateKeypairWithFormHandler sets the operation handler for the update keypair with form operation
	KeypairUpdateKeypairWithFormHandler keypair.UpdateKeypairWithFormHandler
	// ProviderUpdateProviderHandler sets the operation handler for the update provider operation
	ProviderUpdateProviderHandler provider.UpdateProviderHandler
	// ProvidertypeUpdateProviderTypeHandler sets the operation handler for the update provider type operation
	ProvidertypeUpdateProviderTypeHandler providertype.UpdateProviderTypeHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ConfigManagerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ConfigManagerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ConfigManagerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ConfigManagerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ConfigManagerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ConfigManagerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ConfigManagerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ConfigManagerAPI
func (o *ConfigManagerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyHeaderAuth == nil {
		unregistered = append(unregistered, "XAPITokenAuth")
	}

	if o.HostgroupAddComponentHostgroupHandler == nil {
		unregistered = append(unregistered, "hostgroup.AddComponentHostgroupHandler")
	}

	if o.HostgroupDeleteComponentHostgroupHandler == nil {
		unregistered = append(unregistered, "hostgroup.DeleteComponentHostgroupHandler")
	}

	if o.HostgroupUpdateComponentHostgroupHandler == nil {
		unregistered = append(unregistered, "hostgroup.UpdateComponentHostgroupHandler")
	}

	if o.CellAddCellHandler == nil {
		unregistered = append(unregistered, "cell.AddCellHandler")
	}

	if o.HostAddCellHostHandler == nil {
		unregistered = append(unregistered, "host.AddCellHostHandler")
	}

	if o.KeypairAddCellKeypairHandler == nil {
		unregistered = append(unregistered, "keypair.AddCellKeypairHandler")
	}

	if o.ComponentAddComponentHandler == nil {
		unregistered = append(unregistered, "component.AddComponentHandler")
	}

	if o.RoleAddComponentRoleHandler == nil {
		unregistered = append(unregistered, "role.AddComponentRoleHandler")
	}

	if o.CustomerAddCustomerHandler == nil {
		unregistered = append(unregistered, "customer.AddCustomerHandler")
	}

	if o.KeypairAddKeypairHandler == nil {
		unregistered = append(unregistered, "keypair.AddKeypairHandler")
	}

	if o.ProviderAddProviderHandler == nil {
		unregistered = append(unregistered, "provider.AddProviderHandler")
	}

	if o.ProvidertypeAddProviderTypeHandler == nil {
		unregistered = append(unregistered, "providertype.AddProviderTypeHandler")
	}

	if o.CellDeleteCellHandler == nil {
		unregistered = append(unregistered, "cell.DeleteCellHandler")
	}

	if o.RoleDeleteComponentRoleHandler == nil {
		unregistered = append(unregistered, "role.DeleteComponentRoleHandler")
	}

	if o.CustomerDeleteCustomerHandler == nil {
		unregistered = append(unregistered, "customer.DeleteCustomerHandler")
	}

	if o.KeypairDeleteKeypairHandler == nil {
		unregistered = append(unregistered, "keypair.DeleteKeypairHandler")
	}

	if o.ProvidertypeDeleteProviderTypeHandler == nil {
		unregistered = append(unregistered, "providertype.DeleteProviderTypeHandler")
	}

	if o.CellDeployCellAppByIDHandler == nil {
		unregistered = append(unregistered, "cell.DeployCellAppByIDHandler")
	}

	if o.CellDeployCellByIDHandler == nil {
		unregistered = append(unregistered, "cell.DeployCellByIDHandler")
	}

	if o.CellFindCellByCustomerHandler == nil {
		unregistered = append(unregistered, "cell.FindCellByCustomerHandler")
	}

	if o.ComponentFindCellComponentsHandler == nil {
		unregistered = append(unregistered, "component.FindCellComponentsHandler")
	}

	if o.HostFindCellHostsHandler == nil {
		unregistered = append(unregistered, "host.FindCellHostsHandler")
	}

	if o.HostgroupFindComponentHostgroupsHandler == nil {
		unregistered = append(unregistered, "hostgroup.FindComponentHostgroupsHandler")
	}

	if o.RoleFindComponentRolesHandler == nil {
		unregistered = append(unregistered, "role.FindComponentRolesHandler")
	}

	if o.CustomerFindCustomerByNameHandler == nil {
		unregistered = append(unregistered, "customer.FindCustomerByNameHandler")
	}

	if o.KeypairFindKeypairByCustomerHandler == nil {
		unregistered = append(unregistered, "keypair.FindKeypairByCustomerHandler")
	}

	if o.CellGetCellByIDHandler == nil {
		unregistered = append(unregistered, "cell.GetCellByIDHandler")
	}

	if o.ComponentGetCellComponentHandler == nil {
		unregistered = append(unregistered, "component.GetCellComponentHandler")
	}

	if o.CellGetCellFullByIDHandler == nil {
		unregistered = append(unregistered, "cell.GetCellFullByIDHandler")
	}

	if o.HostgroupGetComponentHostgroupByIDHandler == nil {
		unregistered = append(unregistered, "hostgroup.GetComponentHostgroupByIDHandler")
	}

	if o.CustomerGetCustomerByIDHandler == nil {
		unregistered = append(unregistered, "customer.GetCustomerByIDHandler")
	}

	if o.KeypairGetKeypairByIDHandler == nil {
		unregistered = append(unregistered, "keypair.GetKeypairByIDHandler")
	}

	if o.ProviderGetProviderHandler == nil {
		unregistered = append(unregistered, "provider.GetProviderHandler")
	}

	if o.ProvidertypeGetProviderTypeByIDHandler == nil {
		unregistered = append(unregistered, "providertype.GetProviderTypeByIDHandler")
	}

	if o.ProvidertypeListProviderTypesHandler == nil {
		unregistered = append(unregistered, "providertype.ListProviderTypesHandler")
	}

	if o.CellUpdateCellWithFormHandler == nil {
		unregistered = append(unregistered, "cell.UpdateCellWithFormHandler")
	}

	if o.RoleUpdateComponentRoleHandler == nil {
		unregistered = append(unregistered, "role.UpdateComponentRoleHandler")
	}

	if o.CustomerUpdateCustomerHandler == nil {
		unregistered = append(unregistered, "customer.UpdateCustomerHandler")
	}

	if o.CustomerUpdateCustomerWithFormHandler == nil {
		unregistered = append(unregistered, "customer.UpdateCustomerWithFormHandler")
	}

	if o.KeypairUpdateKeypairHandler == nil {
		unregistered = append(unregistered, "keypair.UpdateKeypairHandler")
	}

	if o.KeypairUpdateKeypairWithFormHandler == nil {
		unregistered = append(unregistered, "keypair.UpdateKeypairWithFormHandler")
	}

	if o.ProviderUpdateProviderHandler == nil {
		unregistered = append(unregistered, "provider.UpdateProviderHandler")
	}

	if o.ProvidertypeUpdateProviderTypeHandler == nil {
		unregistered = append(unregistered, "providertype.UpdateProviderTypeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ConfigManagerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ConfigManagerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "APIKeyHeader":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.APIKeyHeaderAuth(token)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *ConfigManagerAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *ConfigManagerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ConfigManagerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ConfigManagerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the config manager API
func (o *ConfigManagerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ConfigManagerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/component/{component_id}/hostgroup"] = hostgroup.NewAddComponentHostgroup(o.context, o.HostgroupAddComponentHostgroupHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}"] = hostgroup.NewDeleteComponentHostgroup(o.context, o.HostgroupDeleteComponentHostgroupHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}"] = hostgroup.NewUpdateComponentHostgroup(o.context, o.HostgroupUpdateComponentHostgroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell"] = cell.NewAddCell(o.context, o.CellAddCellHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/host"] = host.NewAddCellHost(o.context, o.HostAddCellHostHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/keypair/{keypair_name}"] = keypair.NewAddCellKeypair(o.context, o.KeypairAddCellKeypairHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/component"] = component.NewAddComponent(o.context, o.ComponentAddComponentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/component/{component_id}/role"] = role.NewAddComponentRole(o.context, o.RoleAddComponentRoleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer"] = customer.NewAddCustomer(o.context, o.CustomerAddCustomerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/keypair"] = keypair.NewAddKeypair(o.context, o.KeypairAddKeypairHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}/provider"] = provider.NewAddProvider(o.context, o.ProviderAddProviderHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/providertype"] = providertype.NewAddProviderType(o.context, o.ProvidertypeAddProviderTypeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cell/{cell_id}"] = cell.NewDeleteCell(o.context, o.CellDeleteCellHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cell/{cell_id}/component/{component_id}/role/{role_name}"] = role.NewDeleteComponentRole(o.context, o.RoleDeleteComponentRoleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/customer/{customerId}"] = customer.NewDeleteCustomer(o.context, o.CustomerDeleteCustomerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/keypair/{keypair_id}"] = keypair.NewDeleteKeypair(o.context, o.KeypairDeleteKeypairHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/providertype/{providertype_id}"] = providertype.NewDeleteProviderType(o.context, o.ProvidertypeDeleteProviderTypeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/deploy/app"] = cell.NewDeployCellAppByID(o.context, o.CellDeployCellAppByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/deploy"] = cell.NewDeployCellByID(o.context, o.CellDeployCellByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cells"] = cell.NewFindCellByCustomer(o.context, o.CellFindCellByCustomerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/components"] = component.NewFindCellComponents(o.context, o.ComponentFindCellComponentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/hosts"] = host.NewFindCellHosts(o.context, o.HostFindCellHostsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/component/{component_id}/hostgroups"] = hostgroup.NewFindComponentHostgroups(o.context, o.HostgroupFindComponentHostgroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/component/{component_id}/roles"] = role.NewFindComponentRoles(o.context, o.RoleFindComponentRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/findByName"] = customer.NewFindCustomerByName(o.context, o.CustomerFindCustomerByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/keypairs"] = keypair.NewFindKeypairByCustomer(o.context, o.KeypairFindKeypairByCustomerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}"] = cell.NewGetCellByID(o.context, o.CellGetCellByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/component/{component_id}"] = component.NewGetCellComponent(o.context, o.ComponentGetCellComponentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/full"] = cell.NewGetCellFullByID(o.context, o.CellGetCellFullByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}"] = hostgroup.NewGetComponentHostgroupByID(o.context, o.HostgroupGetComponentHostgroupByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customer/{customerId}"] = customer.NewGetCustomerByID(o.context, o.CustomerGetCustomerByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/keypair/{keypair_id}"] = keypair.NewGetKeypairByID(o.context, o.KeypairGetKeypairByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cell/{cell_id}/provider"] = provider.NewGetProvider(o.context, o.ProviderGetProviderHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/providertype/{providertype_id}"] = providertype.NewGetProviderTypeByID(o.context, o.ProvidertypeGetProviderTypeByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/providertypes"] = providertype.NewListProviderTypes(o.context, o.ProvidertypeListProviderTypesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cell/{cell_id}"] = cell.NewUpdateCellWithForm(o.context, o.CellUpdateCellWithFormHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cell/{cell_id}/component/{component_id}/role/{role_name}"] = role.NewUpdateComponentRole(o.context, o.RoleUpdateComponentRoleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/customer"] = customer.NewUpdateCustomer(o.context, o.CustomerUpdateCustomerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/customer/{customerId}"] = customer.NewUpdateCustomerWithForm(o.context, o.CustomerUpdateCustomerWithFormHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/keypair"] = keypair.NewUpdateKeypair(o.context, o.KeypairUpdateKeypairHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/keypair/{keypair_id}"] = keypair.NewUpdateKeypairWithForm(o.context, o.KeypairUpdateKeypairWithFormHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cell/{cell_id}/provider"] = provider.NewUpdateProvider(o.context, o.ProviderUpdateProviderHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/providertype"] = providertype.NewUpdateProviderType(o.context, o.ProvidertypeUpdateProviderTypeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ConfigManagerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *ConfigManagerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
