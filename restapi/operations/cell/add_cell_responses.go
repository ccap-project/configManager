// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package cell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// AddCellCreatedCode is the HTTP code returned for type AddCellCreated
const AddCellCreatedCode int = 201

/*AddCellCreated Created

swagger:response addCellCreated
*/
type AddCellCreated struct {

	/*
	  In: Body
	*/
	Payload models.ULID `json:"body,omitempty"`
}

// NewAddCellCreated creates AddCellCreated with default headers values
func NewAddCellCreated() *AddCellCreated {
	return &AddCellCreated{}
}

// WithPayload adds the payload to the add cell created response
func (o *AddCellCreated) WithPayload(payload models.ULID) *AddCellCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell created response
func (o *AddCellCreated) SetPayload(payload models.ULID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellMethodNotAllowedCode is the HTTP code returned for type AddCellMethodNotAllowed
const AddCellMethodNotAllowedCode int = 405

/*AddCellMethodNotAllowed Invalid input

swagger:response addCellMethodNotAllowed
*/
type AddCellMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellMethodNotAllowed creates AddCellMethodNotAllowed with default headers values
func NewAddCellMethodNotAllowed() *AddCellMethodNotAllowed {
	return &AddCellMethodNotAllowed{}
}

// WithPayload adds the payload to the add cell method not allowed response
func (o *AddCellMethodNotAllowed) WithPayload(payload models.APIResponse) *AddCellMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell method not allowed response
func (o *AddCellMethodNotAllowed) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellConflictCode is the HTTP code returned for type AddCellConflict
const AddCellConflictCode int = 409

/*AddCellConflict Already exists

swagger:response addCellConflict
*/
type AddCellConflict struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellConflict creates AddCellConflict with default headers values
func NewAddCellConflict() *AddCellConflict {
	return &AddCellConflict{}
}

// WithPayload adds the payload to the add cell conflict response
func (o *AddCellConflict) WithPayload(payload models.APIResponse) *AddCellConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell conflict response
func (o *AddCellConflict) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellInternalServerErrorCode is the HTTP code returned for type AddCellInternalServerError
const AddCellInternalServerErrorCode int = 500

/*AddCellInternalServerError Internal error

swagger:response addCellInternalServerError
*/
type AddCellInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellInternalServerError creates AddCellInternalServerError with default headers values
func NewAddCellInternalServerError() *AddCellInternalServerError {
	return &AddCellInternalServerError{}
}

// WithPayload adds the payload to the add cell internal server error response
func (o *AddCellInternalServerError) WithPayload(payload models.APIResponse) *AddCellInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell internal server error response
func (o *AddCellInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
