package cell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"../../../models"
)

// GetCellByIDHandlerFunc turns a function with the right signature into a get cell by Id handler
type GetCellByIDHandlerFunc func(GetCellByIDParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCellByIDHandlerFunc) Handle(params GetCellByIDParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// GetCellByIDHandler interface for that can handle valid get cell by Id params
type GetCellByIDHandler interface {
	Handle(GetCellByIDParams, *models.Customer) middleware.Responder
}

// NewGetCellByID creates a new http.Handler for the get cell by Id operation
func NewGetCellByID(ctx *middleware.Context, handler GetCellByIDHandler) *GetCellByID {
	return &GetCellByID{Context: ctx, Handler: handler}
}

/*GetCellByID swagger:route GET /cell/{cell_id} cell getCellById

Find cell by ID

Returns a single cell

*/
type GetCellByID struct {
	Context *middleware.Context
	Handler GetCellByIDHandler
}

func (o *GetCellByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCellByIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
