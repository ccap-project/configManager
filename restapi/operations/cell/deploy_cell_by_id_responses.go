// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package cell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// DeployCellByIDOKCode is the HTTP code returned for type DeployCellByIDOK
const DeployCellByIDOKCode int = 200

/*DeployCellByIDOK successful operation

swagger:response deployCellByIdOK
*/
type DeployCellByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeployCellByIDOK creates DeployCellByIDOK with default headers values
func NewDeployCellByIDOK() *DeployCellByIDOK {
	return &DeployCellByIDOK{}
}

// WithPayload adds the payload to the deploy cell by Id o k response
func (o *DeployCellByIDOK) WithPayload(payload *models.APIResponse) *DeployCellByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the deploy cell by Id o k response
func (o *DeployCellByIDOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeployCellByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeployCellByIDNoContentCode is the HTTP code returned for type DeployCellByIDNoContent
const DeployCellByIDNoContentCode int = 204

/*DeployCellByIDNoContent no content

swagger:response deployCellByIdNoContent
*/
type DeployCellByIDNoContent struct {
}

// NewDeployCellByIDNoContent creates DeployCellByIDNoContent with default headers values
func NewDeployCellByIDNoContent() *DeployCellByIDNoContent {
	return &DeployCellByIDNoContent{}
}

// WriteResponse to the client
func (o *DeployCellByIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeployCellByIDNotFoundCode is the HTTP code returned for type DeployCellByIDNotFound
const DeployCellByIDNotFoundCode int = 404

/*DeployCellByIDNotFound Cell not found

swagger:response deployCellByIdNotFound
*/
type DeployCellByIDNotFound struct {
}

// NewDeployCellByIDNotFound creates DeployCellByIDNotFound with default headers values
func NewDeployCellByIDNotFound() *DeployCellByIDNotFound {
	return &DeployCellByIDNotFound{}
}

// WriteResponse to the client
func (o *DeployCellByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// DeployCellByIDMethodNotAllowedCode is the HTTP code returned for type DeployCellByIDMethodNotAllowed
const DeployCellByIDMethodNotAllowedCode int = 405

/*DeployCellByIDMethodNotAllowed Invalid input

swagger:response deployCellByIdMethodNotAllowed
*/
type DeployCellByIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeployCellByIDMethodNotAllowed creates DeployCellByIDMethodNotAllowed with default headers values
func NewDeployCellByIDMethodNotAllowed() *DeployCellByIDMethodNotAllowed {
	return &DeployCellByIDMethodNotAllowed{}
}

// WithPayload adds the payload to the deploy cell by Id method not allowed response
func (o *DeployCellByIDMethodNotAllowed) WithPayload(payload *models.APIResponse) *DeployCellByIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the deploy cell by Id method not allowed response
func (o *DeployCellByIDMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeployCellByIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeployCellByIDPreconditionRequiredCode is the HTTP code returned for type DeployCellByIDPreconditionRequired
const DeployCellByIDPreconditionRequiredCode int = 428

/*DeployCellByIDPreconditionRequired Cell incomplete

swagger:response deployCellByIdPreconditionRequired
*/
type DeployCellByIDPreconditionRequired struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeployCellByIDPreconditionRequired creates DeployCellByIDPreconditionRequired with default headers values
func NewDeployCellByIDPreconditionRequired() *DeployCellByIDPreconditionRequired {
	return &DeployCellByIDPreconditionRequired{}
}

// WithPayload adds the payload to the deploy cell by Id precondition required response
func (o *DeployCellByIDPreconditionRequired) WithPayload(payload *models.APIResponse) *DeployCellByIDPreconditionRequired {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the deploy cell by Id precondition required response
func (o *DeployCellByIDPreconditionRequired) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeployCellByIDPreconditionRequired) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(428)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeployCellByIDInternalServerErrorCode is the HTTP code returned for type DeployCellByIDInternalServerError
const DeployCellByIDInternalServerErrorCode int = 500

/*DeployCellByIDInternalServerError Internal error

swagger:response deployCellByIdInternalServerError
*/
type DeployCellByIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeployCellByIDInternalServerError creates DeployCellByIDInternalServerError with default headers values
func NewDeployCellByIDInternalServerError() *DeployCellByIDInternalServerError {
	return &DeployCellByIDInternalServerError{}
}

// WithPayload adds the payload to the deploy cell by Id internal server error response
func (o *DeployCellByIDInternalServerError) WithPayload(payload *models.APIResponse) *DeployCellByIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the deploy cell by Id internal server error response
func (o *DeployCellByIDInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeployCellByIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
