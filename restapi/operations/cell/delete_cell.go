// Code generated by go-swagger; DO NOT EDIT.

package cell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"configManager/models"
)

// DeleteCellHandlerFunc turns a function with the right signature into a delete cell handler
type DeleteCellHandlerFunc func(DeleteCellParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCellHandlerFunc) Handle(params DeleteCellParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// DeleteCellHandler interface for that can handle valid delete cell params
type DeleteCellHandler interface {
	Handle(DeleteCellParams, *models.Customer) middleware.Responder
}

// NewDeleteCell creates a new http.Handler for the delete cell operation
func NewDeleteCell(ctx *middleware.Context, handler DeleteCellHandler) *DeleteCell {
	return &DeleteCell{Context: ctx, Handler: handler}
}

/*DeleteCell swagger:route DELETE /cell/{cell_id} cell deleteCell

Deletes a cell

*/
type DeleteCell struct {
	Context *middleware.Context
	Handler DeleteCellHandler
}

func (o *DeleteCell) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCellParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
