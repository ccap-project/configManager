package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"../../../models"
)

// FindComponentRolesOKCode is the HTTP code returned for type FindComponentRolesOK
const FindComponentRolesOKCode int = 200

/*FindComponentRolesOK successful operation

swagger:response findComponentRolesOK
*/
type FindComponentRolesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Role `json:"body,omitempty"`
}

// NewFindComponentRolesOK creates FindComponentRolesOK with default headers values
func NewFindComponentRolesOK() *FindComponentRolesOK {
	return &FindComponentRolesOK{}
}

// WithPayload adds the payload to the find component roles o k response
func (o *FindComponentRolesOK) WithPayload(payload []*models.Role) *FindComponentRolesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find component roles o k response
func (o *FindComponentRolesOK) SetPayload(payload []*models.Role) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindComponentRolesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Role, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindComponentRolesBadRequestCode is the HTTP code returned for type FindComponentRolesBadRequest
const FindComponentRolesBadRequestCode int = 400

/*FindComponentRolesBadRequest Invalid cell id or role id

swagger:response findComponentRolesBadRequest
*/
type FindComponentRolesBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewFindComponentRolesBadRequest creates FindComponentRolesBadRequest with default headers values
func NewFindComponentRolesBadRequest() *FindComponentRolesBadRequest {
	return &FindComponentRolesBadRequest{}
}

// WithPayload adds the payload to the find component roles bad request response
func (o *FindComponentRolesBadRequest) WithPayload(payload models.APIResponse) *FindComponentRolesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find component roles bad request response
func (o *FindComponentRolesBadRequest) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindComponentRolesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindComponentRolesInternalServerErrorCode is the HTTP code returned for type FindComponentRolesInternalServerError
const FindComponentRolesInternalServerErrorCode int = 500

/*FindComponentRolesInternalServerError Internal error

swagger:response findComponentRolesInternalServerError
*/
type FindComponentRolesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewFindComponentRolesInternalServerError creates FindComponentRolesInternalServerError with default headers values
func NewFindComponentRolesInternalServerError() *FindComponentRolesInternalServerError {
	return &FindComponentRolesInternalServerError{}
}

// WithPayload adds the payload to the find component roles internal server error response
func (o *FindComponentRolesInternalServerError) WithPayload(payload models.APIResponse) *FindComponentRolesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find component roles internal server error response
func (o *FindComponentRolesInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindComponentRolesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
