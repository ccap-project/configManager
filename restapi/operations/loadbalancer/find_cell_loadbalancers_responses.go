// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package loadbalancer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// FindCellLoadbalancersOKCode is the HTTP code returned for type FindCellLoadbalancersOK
const FindCellLoadbalancersOKCode int = 200

/*FindCellLoadbalancersOK successful operation

swagger:response findCellLoadbalancersOK
*/
type FindCellLoadbalancersOK struct {

	/*
	  In: Body
	*/
	Payload models.FindCellLoadbalancersOKBody `json:"body,omitempty"`
}

// NewFindCellLoadbalancersOK creates FindCellLoadbalancersOK with default headers values
func NewFindCellLoadbalancersOK() *FindCellLoadbalancersOK {
	return &FindCellLoadbalancersOK{}
}

// WithPayload adds the payload to the find cell loadbalancers o k response
func (o *FindCellLoadbalancersOK) WithPayload(payload models.FindCellLoadbalancersOKBody) *FindCellLoadbalancersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find cell loadbalancers o k response
func (o *FindCellLoadbalancersOK) SetPayload(payload models.FindCellLoadbalancersOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindCellLoadbalancersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.FindCellLoadbalancersOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindCellLoadbalancersBadRequestCode is the HTTP code returned for type FindCellLoadbalancersBadRequest
const FindCellLoadbalancersBadRequestCode int = 400

/*FindCellLoadbalancersBadRequest Invalid cell id

swagger:response findCellLoadbalancersBadRequest
*/
type FindCellLoadbalancersBadRequest struct {
}

// NewFindCellLoadbalancersBadRequest creates FindCellLoadbalancersBadRequest with default headers values
func NewFindCellLoadbalancersBadRequest() *FindCellLoadbalancersBadRequest {
	return &FindCellLoadbalancersBadRequest{}
}

// WriteResponse to the client
func (o *FindCellLoadbalancersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// FindCellLoadbalancersNotFoundCode is the HTTP code returned for type FindCellLoadbalancersNotFound
const FindCellLoadbalancersNotFoundCode int = 404

/*FindCellLoadbalancersNotFound loadbalancer not found

swagger:response findCellLoadbalancersNotFound
*/
type FindCellLoadbalancersNotFound struct {
}

// NewFindCellLoadbalancersNotFound creates FindCellLoadbalancersNotFound with default headers values
func NewFindCellLoadbalancersNotFound() *FindCellLoadbalancersNotFound {
	return &FindCellLoadbalancersNotFound{}
}

// WriteResponse to the client
func (o *FindCellLoadbalancersNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// FindCellLoadbalancersInternalServerErrorCode is the HTTP code returned for type FindCellLoadbalancersInternalServerError
const FindCellLoadbalancersInternalServerErrorCode int = 500

/*FindCellLoadbalancersInternalServerError Internal error

swagger:response findCellLoadbalancersInternalServerError
*/
type FindCellLoadbalancersInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewFindCellLoadbalancersInternalServerError creates FindCellLoadbalancersInternalServerError with default headers values
func NewFindCellLoadbalancersInternalServerError() *FindCellLoadbalancersInternalServerError {
	return &FindCellLoadbalancersInternalServerError{}
}

// WithPayload adds the payload to the find cell loadbalancers internal server error response
func (o *FindCellLoadbalancersInternalServerError) WithPayload(payload models.APIResponse) *FindCellLoadbalancersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find cell loadbalancers internal server error response
func (o *FindCellLoadbalancersInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindCellLoadbalancersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
