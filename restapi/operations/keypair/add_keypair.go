// Code generated by go-swagger; DO NOT EDIT.

package keypair

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"configManager/models"
)

// AddKeypairHandlerFunc turns a function with the right signature into a add keypair handler
type AddKeypairHandlerFunc func(AddKeypairParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn AddKeypairHandlerFunc) Handle(params AddKeypairParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// AddKeypairHandler interface for that can handle valid add keypair params
type AddKeypairHandler interface {
	Handle(AddKeypairParams, *models.Customer) middleware.Responder
}

// NewAddKeypair creates a new http.Handler for the add keypair operation
func NewAddKeypair(ctx *middleware.Context, handler AddKeypairHandler) *AddKeypair {
	return &AddKeypair{Context: ctx, Handler: handler}
}

/*AddKeypair swagger:route POST /keypair keypair addKeypair

Add a new keypair

*/
type AddKeypair struct {
	Context *middleware.Context
	Handler AddKeypairHandler
}

func (o *AddKeypair) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddKeypairParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
