// Code generated by go-swagger; DO NOT EDIT.

package keypair

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"configManager/models"
)

// UpdateKeypairWithFormHandlerFunc turns a function with the right signature into a update keypair with form handler
type UpdateKeypairWithFormHandlerFunc func(UpdateKeypairWithFormParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateKeypairWithFormHandlerFunc) Handle(params UpdateKeypairWithFormParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// UpdateKeypairWithFormHandler interface for that can handle valid update keypair with form params
type UpdateKeypairWithFormHandler interface {
	Handle(UpdateKeypairWithFormParams, *models.Customer) middleware.Responder
}

// NewUpdateKeypairWithForm creates a new http.Handler for the update keypair with form operation
func NewUpdateKeypairWithForm(ctx *middleware.Context, handler UpdateKeypairWithFormHandler) *UpdateKeypairWithForm {
	return &UpdateKeypairWithForm{Context: ctx, Handler: handler}
}

/*UpdateKeypairWithForm swagger:route POST /keypair/{keypair_id} keypair updateKeypairWithForm

Updates a keypair with form data

*/
type UpdateKeypairWithForm struct {
	Context *middleware.Context
	Handler UpdateKeypairWithFormHandler
}

func (o *UpdateKeypairWithForm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateKeypairWithFormParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
