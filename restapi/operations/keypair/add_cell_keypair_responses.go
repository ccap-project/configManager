package keypair

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"../../../models"
)

// AddCellKeypairCreatedCode is the HTTP code returned for type AddCellKeypairCreated
const AddCellKeypairCreatedCode int = 201

/*AddCellKeypairCreated Created

swagger:response addCellKeypairCreated
*/
type AddCellKeypairCreated struct {

	/*
	  In: Body
	*/
	Payload int64 `json:"body,omitempty"`
}

// NewAddCellKeypairCreated creates AddCellKeypairCreated with default headers values
func NewAddCellKeypairCreated() *AddCellKeypairCreated {
	return &AddCellKeypairCreated{}
}

// WithPayload adds the payload to the add cell keypair created response
func (o *AddCellKeypairCreated) WithPayload(payload int64) *AddCellKeypairCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell keypair created response
func (o *AddCellKeypairCreated) SetPayload(payload int64) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellKeypairCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellKeypairNotFoundCode is the HTTP code returned for type AddCellKeypairNotFound
const AddCellKeypairNotFoundCode int = 404

/*AddCellKeypairNotFound does not exists

swagger:response addCellKeypairNotFound
*/
type AddCellKeypairNotFound struct {
}

// NewAddCellKeypairNotFound creates AddCellKeypairNotFound with default headers values
func NewAddCellKeypairNotFound() *AddCellKeypairNotFound {
	return &AddCellKeypairNotFound{}
}

// WriteResponse to the client
func (o *AddCellKeypairNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

// AddCellKeypairMethodNotAllowedCode is the HTTP code returned for type AddCellKeypairMethodNotAllowed
const AddCellKeypairMethodNotAllowedCode int = 405

/*AddCellKeypairMethodNotAllowed Invalid input

swagger:response addCellKeypairMethodNotAllowed
*/
type AddCellKeypairMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellKeypairMethodNotAllowed creates AddCellKeypairMethodNotAllowed with default headers values
func NewAddCellKeypairMethodNotAllowed() *AddCellKeypairMethodNotAllowed {
	return &AddCellKeypairMethodNotAllowed{}
}

// WithPayload adds the payload to the add cell keypair method not allowed response
func (o *AddCellKeypairMethodNotAllowed) WithPayload(payload models.APIResponse) *AddCellKeypairMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell keypair method not allowed response
func (o *AddCellKeypairMethodNotAllowed) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellKeypairMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellKeypairConflictCode is the HTTP code returned for type AddCellKeypairConflict
const AddCellKeypairConflictCode int = 409

/*AddCellKeypairConflict Already exists

swagger:response addCellKeypairConflict
*/
type AddCellKeypairConflict struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellKeypairConflict creates AddCellKeypairConflict with default headers values
func NewAddCellKeypairConflict() *AddCellKeypairConflict {
	return &AddCellKeypairConflict{}
}

// WithPayload adds the payload to the add cell keypair conflict response
func (o *AddCellKeypairConflict) WithPayload(payload models.APIResponse) *AddCellKeypairConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell keypair conflict response
func (o *AddCellKeypairConflict) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellKeypairConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddCellKeypairInternalServerErrorCode is the HTTP code returned for type AddCellKeypairInternalServerError
const AddCellKeypairInternalServerErrorCode int = 500

/*AddCellKeypairInternalServerError Internal error

swagger:response addCellKeypairInternalServerError
*/
type AddCellKeypairInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewAddCellKeypairInternalServerError creates AddCellKeypairInternalServerError with default headers values
func NewAddCellKeypairInternalServerError() *AddCellKeypairInternalServerError {
	return &AddCellKeypairInternalServerError{}
}

// WithPayload adds the payload to the add cell keypair internal server error response
func (o *AddCellKeypairInternalServerError) WithPayload(payload models.APIResponse) *AddCellKeypairInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add cell keypair internal server error response
func (o *AddCellKeypairInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddCellKeypairInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
