// Code generated by go-swagger; DO NOT EDIT.

package keypair

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateKeypairWithFormParams creates a new UpdateKeypairWithFormParams object
// with the default values initialized.
func NewUpdateKeypairWithFormParams() UpdateKeypairWithFormParams {
	var ()
	return UpdateKeypairWithFormParams{}
}

// UpdateKeypairWithFormParams contains all the bound params for the update keypair with form operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateKeypairWithForm
type UpdateKeypairWithFormParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of keypair that needs to be updated
	  Required: true
	  In: path
	*/
	KeypairID int64
	/*Updated name of the keypair
	  In: formData
	*/
	PublicKey *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UpdateKeypairWithFormParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	rKeypairID, rhkKeypairID, _ := route.Params.GetOK("keypair_id")
	if err := o.bindKeypairID(rKeypairID, rhkKeypairID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPublicKey, fdhkPublicKey, _ := fds.GetOK("public_key")
	if err := o.bindPublicKey(fdPublicKey, fdhkPublicKey, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateKeypairWithFormParams) bindKeypairID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("keypair_id", "path", "int64", raw)
	}
	o.KeypairID = value

	return nil
}

func (o *UpdateKeypairWithFormParams) bindPublicKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PublicKey = &raw

	return nil
}
