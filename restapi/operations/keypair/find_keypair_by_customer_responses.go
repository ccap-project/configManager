package keypair

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"../../../models"
)

// FindKeypairByCustomerOKCode is the HTTP code returned for type FindKeypairByCustomerOK
const FindKeypairByCustomerOKCode int = 200

/*FindKeypairByCustomerOK successful operation

swagger:response findKeypairByCustomerOK
*/
type FindKeypairByCustomerOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Keypair `json:"body,omitempty"`
}

// NewFindKeypairByCustomerOK creates FindKeypairByCustomerOK with default headers values
func NewFindKeypairByCustomerOK() *FindKeypairByCustomerOK {
	return &FindKeypairByCustomerOK{}
}

// WithPayload adds the payload to the find keypair by customer o k response
func (o *FindKeypairByCustomerOK) WithPayload(payload []*models.Keypair) *FindKeypairByCustomerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find keypair by customer o k response
func (o *FindKeypairByCustomerOK) SetPayload(payload []*models.Keypair) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindKeypairByCustomerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Keypair, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// FindKeypairByCustomerBadRequestCode is the HTTP code returned for type FindKeypairByCustomerBadRequest
const FindKeypairByCustomerBadRequestCode int = 400

/*FindKeypairByCustomerBadRequest Invalid customer id

swagger:response findKeypairByCustomerBadRequest
*/
type FindKeypairByCustomerBadRequest struct {
}

// NewFindKeypairByCustomerBadRequest creates FindKeypairByCustomerBadRequest with default headers values
func NewFindKeypairByCustomerBadRequest() *FindKeypairByCustomerBadRequest {
	return &FindKeypairByCustomerBadRequest{}
}

// WriteResponse to the client
func (o *FindKeypairByCustomerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
}

// FindKeypairByCustomerNotFoundCode is the HTTP code returned for type FindKeypairByCustomerNotFound
const FindKeypairByCustomerNotFoundCode int = 404

/*FindKeypairByCustomerNotFound Keypair not found

swagger:response findKeypairByCustomerNotFound
*/
type FindKeypairByCustomerNotFound struct {
}

// NewFindKeypairByCustomerNotFound creates FindKeypairByCustomerNotFound with default headers values
func NewFindKeypairByCustomerNotFound() *FindKeypairByCustomerNotFound {
	return &FindKeypairByCustomerNotFound{}
}

// WriteResponse to the client
func (o *FindKeypairByCustomerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

// FindKeypairByCustomerInternalServerErrorCode is the HTTP code returned for type FindKeypairByCustomerInternalServerError
const FindKeypairByCustomerInternalServerErrorCode int = 500

/*FindKeypairByCustomerInternalServerError InternalError

swagger:response findKeypairByCustomerInternalServerError
*/
type FindKeypairByCustomerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewFindKeypairByCustomerInternalServerError creates FindKeypairByCustomerInternalServerError with default headers values
func NewFindKeypairByCustomerInternalServerError() *FindKeypairByCustomerInternalServerError {
	return &FindKeypairByCustomerInternalServerError{}
}

// WithPayload adds the payload to the find keypair by customer internal server error response
func (o *FindKeypairByCustomerInternalServerError) WithPayload(payload models.APIResponse) *FindKeypairByCustomerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the find keypair by customer internal server error response
func (o *FindKeypairByCustomerInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FindKeypairByCustomerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
