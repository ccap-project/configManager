// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateCustomerWithFormHandlerFunc turns a function with the right signature into a update customer with form handler
type UpdateCustomerWithFormHandlerFunc func(UpdateCustomerWithFormParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateCustomerWithFormHandlerFunc) Handle(params UpdateCustomerWithFormParams) middleware.Responder {
	return fn(params)
}

// UpdateCustomerWithFormHandler interface for that can handle valid update customer with form params
type UpdateCustomerWithFormHandler interface {
	Handle(UpdateCustomerWithFormParams) middleware.Responder
}

// NewUpdateCustomerWithForm creates a new http.Handler for the update customer with form operation
func NewUpdateCustomerWithForm(ctx *middleware.Context, handler UpdateCustomerWithFormHandler) *UpdateCustomerWithForm {
	return &UpdateCustomerWithForm{Context: ctx, Handler: handler}
}

/*UpdateCustomerWithForm swagger:route POST /customer/{customerId} customer updateCustomerWithForm

Updates a customer with form data

*/
type UpdateCustomerWithForm struct {
	Context *middleware.Context
	Handler UpdateCustomerWithFormHandler
}

func (o *UpdateCustomerWithForm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateCustomerWithFormParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
