package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindCustomerByNameHandlerFunc turns a function with the right signature into a find customer by name handler
type FindCustomerByNameHandlerFunc func(FindCustomerByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindCustomerByNameHandlerFunc) Handle(params FindCustomerByNameParams) middleware.Responder {
	return fn(params)
}

// FindCustomerByNameHandler interface for that can handle valid find customer by name params
type FindCustomerByNameHandler interface {
	Handle(FindCustomerByNameParams) middleware.Responder
}

// NewFindCustomerByName creates a new http.Handler for the find customer by name operation
func NewFindCustomerByName(ctx *middleware.Context, handler FindCustomerByNameHandler) *FindCustomerByName {
	return &FindCustomerByName{Context: ctx, Handler: handler}
}

/*FindCustomerByName swagger:route GET /customer/findByName customer findCustomerByName

Finds Customer by name

*/
type FindCustomerByName struct {
	Context *middleware.Context
	Handler FindCustomerByNameHandler
}

func (o *FindCustomerByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindCustomerByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
