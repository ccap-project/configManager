// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package providerregion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// AddProviderRegionOKCode is the HTTP code returned for type AddProviderRegionOK
const AddProviderRegionOKCode int = 200

/*AddProviderRegionOK Already exists

swagger:response addProviderRegionOK
*/
type AddProviderRegionOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddProviderRegionOK creates AddProviderRegionOK with default headers values
func NewAddProviderRegionOK() *AddProviderRegionOK {
	return &AddProviderRegionOK{}
}

// WithPayload adds the payload to the add provider region o k response
func (o *AddProviderRegionOK) WithPayload(payload *models.APIResponse) *AddProviderRegionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider region o k response
func (o *AddProviderRegionOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderRegionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProviderRegionCreatedCode is the HTTP code returned for type AddProviderRegionCreated
const AddProviderRegionCreatedCode int = 201

/*AddProviderRegionCreated Created

swagger:response addProviderRegionCreated
*/
type AddProviderRegionCreated struct {

	/*
	  In: Body
	*/
	Payload models.ULID `json:"body,omitempty"`
}

// NewAddProviderRegionCreated creates AddProviderRegionCreated with default headers values
func NewAddProviderRegionCreated() *AddProviderRegionCreated {
	return &AddProviderRegionCreated{}
}

// WithPayload adds the payload to the add provider region created response
func (o *AddProviderRegionCreated) WithPayload(payload models.ULID) *AddProviderRegionCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider region created response
func (o *AddProviderRegionCreated) SetPayload(payload models.ULID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderRegionCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddProviderRegionMethodNotAllowedCode is the HTTP code returned for type AddProviderRegionMethodNotAllowed
const AddProviderRegionMethodNotAllowedCode int = 405

/*AddProviderRegionMethodNotAllowed Invalid input

swagger:response addProviderRegionMethodNotAllowed
*/
type AddProviderRegionMethodNotAllowed struct {
}

// NewAddProviderRegionMethodNotAllowed creates AddProviderRegionMethodNotAllowed with default headers values
func NewAddProviderRegionMethodNotAllowed() *AddProviderRegionMethodNotAllowed {
	return &AddProviderRegionMethodNotAllowed{}
}

// WriteResponse to the client
func (o *AddProviderRegionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(405)
}

// AddProviderRegionInternalServerErrorCode is the HTTP code returned for type AddProviderRegionInternalServerError
const AddProviderRegionInternalServerErrorCode int = 500

/*AddProviderRegionInternalServerError Internal error

swagger:response addProviderRegionInternalServerError
*/
type AddProviderRegionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddProviderRegionInternalServerError creates AddProviderRegionInternalServerError with default headers values
func NewAddProviderRegionInternalServerError() *AddProviderRegionInternalServerError {
	return &AddProviderRegionInternalServerError{}
}

// WithPayload adds the payload to the add provider region internal server error response
func (o *AddProviderRegionInternalServerError) WithPayload(payload *models.APIResponse) *AddProviderRegionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider region internal server error response
func (o *AddProviderRegionInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderRegionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
