// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package providerregion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// ListProviderRegionsOKCode is the HTTP code returned for type ListProviderRegionsOK
const ListProviderRegionsOKCode int = 200

/*ListProviderRegionsOK successful operation

swagger:response listProviderRegionsOK
*/
type ListProviderRegionsOK struct {

	/*
	  In: Body
	*/
	Payload models.ListProviderRegionsOKBody `json:"body,omitempty"`
}

// NewListProviderRegionsOK creates ListProviderRegionsOK with default headers values
func NewListProviderRegionsOK() *ListProviderRegionsOK {
	return &ListProviderRegionsOK{}
}

// WithPayload adds the payload to the list provider regions o k response
func (o *ListProviderRegionsOK) WithPayload(payload models.ListProviderRegionsOKBody) *ListProviderRegionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list provider regions o k response
func (o *ListProviderRegionsOK) SetPayload(payload models.ListProviderRegionsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProviderRegionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.ListProviderRegionsOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ListProviderRegionsBadRequestCode is the HTTP code returned for type ListProviderRegionsBadRequest
const ListProviderRegionsBadRequestCode int = 400

/*ListProviderRegionsBadRequest Invalid ID supplied

swagger:response listProviderRegionsBadRequest
*/
type ListProviderRegionsBadRequest struct {
}

// NewListProviderRegionsBadRequest creates ListProviderRegionsBadRequest with default headers values
func NewListProviderRegionsBadRequest() *ListProviderRegionsBadRequest {
	return &ListProviderRegionsBadRequest{}
}

// WriteResponse to the client
func (o *ListProviderRegionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// ListProviderRegionsNotFoundCode is the HTTP code returned for type ListProviderRegionsNotFound
const ListProviderRegionsNotFoundCode int = 404

/*ListProviderRegionsNotFound Provider not found

swagger:response listProviderRegionsNotFound
*/
type ListProviderRegionsNotFound struct {
}

// NewListProviderRegionsNotFound creates ListProviderRegionsNotFound with default headers values
func NewListProviderRegionsNotFound() *ListProviderRegionsNotFound {
	return &ListProviderRegionsNotFound{}
}

// WriteResponse to the client
func (o *ListProviderRegionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// ListProviderRegionsInternalServerErrorCode is the HTTP code returned for type ListProviderRegionsInternalServerError
const ListProviderRegionsInternalServerErrorCode int = 500

/*ListProviderRegionsInternalServerError Internal error

swagger:response listProviderRegionsInternalServerError
*/
type ListProviderRegionsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewListProviderRegionsInternalServerError creates ListProviderRegionsInternalServerError with default headers values
func NewListProviderRegionsInternalServerError() *ListProviderRegionsInternalServerError {
	return &ListProviderRegionsInternalServerError{}
}

// WithPayload adds the payload to the list provider regions internal server error response
func (o *ListProviderRegionsInternalServerError) WithPayload(payload *models.APIResponse) *ListProviderRegionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list provider regions internal server error response
func (o *ListProviderRegionsInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProviderRegionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
