package providertype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateProviderTypeHandlerFunc turns a function with the right signature into a update provider type handler
type UpdateProviderTypeHandlerFunc func(UpdateProviderTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProviderTypeHandlerFunc) Handle(params UpdateProviderTypeParams) middleware.Responder {
	return fn(params)
}

// UpdateProviderTypeHandler interface for that can handle valid update provider type params
type UpdateProviderTypeHandler interface {
	Handle(UpdateProviderTypeParams) middleware.Responder
}

// NewUpdateProviderType creates a new http.Handler for the update provider type operation
func NewUpdateProviderType(ctx *middleware.Context, handler UpdateProviderTypeHandler) *UpdateProviderType {
	return &UpdateProviderType{Context: ctx, Handler: handler}
}

/*UpdateProviderType swagger:route PUT /providertype providertype updateProviderType

Update an existing provider type

*/
type UpdateProviderType struct {
	Context *middleware.Context
	Handler UpdateProviderTypeHandler
}

func (o *UpdateProviderType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateProviderTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
