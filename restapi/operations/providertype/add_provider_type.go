package providertype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddProviderTypeHandlerFunc turns a function with the right signature into a add provider type handler
type AddProviderTypeHandlerFunc func(AddProviderTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddProviderTypeHandlerFunc) Handle(params AddProviderTypeParams) middleware.Responder {
	return fn(params)
}

// AddProviderTypeHandler interface for that can handle valid add provider type params
type AddProviderTypeHandler interface {
	Handle(AddProviderTypeParams) middleware.Responder
}

// NewAddProviderType creates a new http.Handler for the add provider type operation
func NewAddProviderType(ctx *middleware.Context, handler AddProviderTypeHandler) *AddProviderType {
	return &AddProviderType{Context: ctx, Handler: handler}
}

/*AddProviderType swagger:route POST /providertype providertype addProviderType

Add a new provider type

*/
type AddProviderType struct {
	Context *middleware.Context
	Handler AddProviderTypeHandler
}

func (o *AddProviderType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddProviderTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
