package providertype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListProviderTypesHandlerFunc turns a function with the right signature into a list provider types handler
type ListProviderTypesHandlerFunc func(ListProviderTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListProviderTypesHandlerFunc) Handle(params ListProviderTypesParams) middleware.Responder {
	return fn(params)
}

// ListProviderTypesHandler interface for that can handle valid list provider types params
type ListProviderTypesHandler interface {
	Handle(ListProviderTypesParams) middleware.Responder
}

// NewListProviderTypes creates a new http.Handler for the list provider types operation
func NewListProviderTypes(ctx *middleware.Context, handler ListProviderTypesHandler) *ListProviderTypes {
	return &ListProviderTypes{Context: ctx, Handler: handler}
}

/*ListProviderTypes swagger:route GET /providertypes providertype listProviderTypes

List provider types

Returns a list of provider types

*/
type ListProviderTypes struct {
	Context *middleware.Context
	Handler ListProviderTypesHandler
}

func (o *ListProviderTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListProviderTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
