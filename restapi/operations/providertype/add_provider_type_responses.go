// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package providertype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// AddProviderTypeOKCode is the HTTP code returned for type AddProviderTypeOK
const AddProviderTypeOKCode int = 200

/*AddProviderTypeOK Already exists

swagger:response addProviderTypeOK
*/
type AddProviderTypeOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddProviderTypeOK creates AddProviderTypeOK with default headers values
func NewAddProviderTypeOK() *AddProviderTypeOK {
	return &AddProviderTypeOK{}
}

// WithPayload adds the payload to the add provider type o k response
func (o *AddProviderTypeOK) WithPayload(payload *models.APIResponse) *AddProviderTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider type o k response
func (o *AddProviderTypeOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddProviderTypeCreatedCode is the HTTP code returned for type AddProviderTypeCreated
const AddProviderTypeCreatedCode int = 201

/*AddProviderTypeCreated Created

swagger:response addProviderTypeCreated
*/
type AddProviderTypeCreated struct {

	/*
	  In: Body
	*/
	Payload models.ULID `json:"body,omitempty"`
}

// NewAddProviderTypeCreated creates AddProviderTypeCreated with default headers values
func NewAddProviderTypeCreated() *AddProviderTypeCreated {
	return &AddProviderTypeCreated{}
}

// WithPayload adds the payload to the add provider type created response
func (o *AddProviderTypeCreated) WithPayload(payload models.ULID) *AddProviderTypeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider type created response
func (o *AddProviderTypeCreated) SetPayload(payload models.ULID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderTypeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddProviderTypeMethodNotAllowedCode is the HTTP code returned for type AddProviderTypeMethodNotAllowed
const AddProviderTypeMethodNotAllowedCode int = 405

/*AddProviderTypeMethodNotAllowed Invalid input

swagger:response addProviderTypeMethodNotAllowed
*/
type AddProviderTypeMethodNotAllowed struct {
}

// NewAddProviderTypeMethodNotAllowed creates AddProviderTypeMethodNotAllowed with default headers values
func NewAddProviderTypeMethodNotAllowed() *AddProviderTypeMethodNotAllowed {
	return &AddProviderTypeMethodNotAllowed{}
}

// WriteResponse to the client
func (o *AddProviderTypeMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(405)
}

// AddProviderTypeInternalServerErrorCode is the HTTP code returned for type AddProviderTypeInternalServerError
const AddProviderTypeInternalServerErrorCode int = 500

/*AddProviderTypeInternalServerError Internal error

swagger:response addProviderTypeInternalServerError
*/
type AddProviderTypeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddProviderTypeInternalServerError creates AddProviderTypeInternalServerError with default headers values
func NewAddProviderTypeInternalServerError() *AddProviderTypeInternalServerError {
	return &AddProviderTypeInternalServerError{}
}

// WithPayload adds the payload to the add provider type internal server error response
func (o *AddProviderTypeInternalServerError) WithPayload(payload *models.APIResponse) *AddProviderTypeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add provider type internal server error response
func (o *AddProviderTypeInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddProviderTypeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
