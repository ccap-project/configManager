package providertype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteProviderTypeHandlerFunc turns a function with the right signature into a delete provider type handler
type DeleteProviderTypeHandlerFunc func(DeleteProviderTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProviderTypeHandlerFunc) Handle(params DeleteProviderTypeParams) middleware.Responder {
	return fn(params)
}

// DeleteProviderTypeHandler interface for that can handle valid delete provider type params
type DeleteProviderTypeHandler interface {
	Handle(DeleteProviderTypeParams) middleware.Responder
}

// NewDeleteProviderType creates a new http.Handler for the delete provider type operation
func NewDeleteProviderType(ctx *middleware.Context, handler DeleteProviderTypeHandler) *DeleteProviderType {
	return &DeleteProviderType{Context: ctx, Handler: handler}
}

/*DeleteProviderType swagger:route DELETE /providertype/{providertype_id} providertype deleteProviderType

Deletes a provider type

*/
type DeleteProviderType struct {
	Context *middleware.Context
	Handler DeleteProviderTypeHandler
}

func (o *DeleteProviderType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteProviderTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
