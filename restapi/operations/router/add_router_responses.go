// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package router

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// AddRouterCreatedCode is the HTTP code returned for type AddRouterCreated
const AddRouterCreatedCode int = 201

/*AddRouterCreated Created

swagger:response addRouterCreated
*/
type AddRouterCreated struct {

	/*
	  In: Body
	*/
	Payload models.ULID `json:"body,omitempty"`
}

// NewAddRouterCreated creates AddRouterCreated with default headers values
func NewAddRouterCreated() *AddRouterCreated {
	return &AddRouterCreated{}
}

// WithPayload adds the payload to the add router created response
func (o *AddRouterCreated) WithPayload(payload models.ULID) *AddRouterCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add router created response
func (o *AddRouterCreated) SetPayload(payload models.ULID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddRouterCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// AddRouterMethodNotAllowedCode is the HTTP code returned for type AddRouterMethodNotAllowed
const AddRouterMethodNotAllowedCode int = 405

/*AddRouterMethodNotAllowed Invalid input

swagger:response addRouterMethodNotAllowed
*/
type AddRouterMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddRouterMethodNotAllowed creates AddRouterMethodNotAllowed with default headers values
func NewAddRouterMethodNotAllowed() *AddRouterMethodNotAllowed {
	return &AddRouterMethodNotAllowed{}
}

// WithPayload adds the payload to the add router method not allowed response
func (o *AddRouterMethodNotAllowed) WithPayload(payload *models.APIResponse) *AddRouterMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add router method not allowed response
func (o *AddRouterMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddRouterMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddRouterConflictCode is the HTTP code returned for type AddRouterConflict
const AddRouterConflictCode int = 409

/*AddRouterConflict Already exists

swagger:response addRouterConflict
*/
type AddRouterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddRouterConflict creates AddRouterConflict with default headers values
func NewAddRouterConflict() *AddRouterConflict {
	return &AddRouterConflict{}
}

// WithPayload adds the payload to the add router conflict response
func (o *AddRouterConflict) WithPayload(payload *models.APIResponse) *AddRouterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add router conflict response
func (o *AddRouterConflict) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddRouterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddRouterInternalServerErrorCode is the HTTP code returned for type AddRouterInternalServerError
const AddRouterInternalServerErrorCode int = 500

/*AddRouterInternalServerError Internal error

swagger:response addRouterInternalServerError
*/
type AddRouterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewAddRouterInternalServerError creates AddRouterInternalServerError with default headers values
func NewAddRouterInternalServerError() *AddRouterInternalServerError {
	return &AddRouterInternalServerError{}
}

// WithPayload adds the payload to the add router internal server error response
func (o *AddRouterInternalServerError) WithPayload(payload *models.APIResponse) *AddRouterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add router internal server error response
func (o *AddRouterInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddRouterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
