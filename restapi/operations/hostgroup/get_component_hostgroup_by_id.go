package hostgroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"../../../models"
)

// GetComponentHostgroupByIDHandlerFunc turns a function with the right signature into a get component hostgroup by ID handler
type GetComponentHostgroupByIDHandlerFunc func(GetComponentHostgroupByIDParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn GetComponentHostgroupByIDHandlerFunc) Handle(params GetComponentHostgroupByIDParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// GetComponentHostgroupByIDHandler interface for that can handle valid get component hostgroup by ID params
type GetComponentHostgroupByIDHandler interface {
	Handle(GetComponentHostgroupByIDParams, *models.Customer) middleware.Responder
}

// NewGetComponentHostgroupByID creates a new http.Handler for the get component hostgroup by ID operation
func NewGetComponentHostgroupByID(ctx *middleware.Context, handler GetComponentHostgroupByIDHandler) *GetComponentHostgroupByID {
	return &GetComponentHostgroupByID{Context: ctx, Handler: handler}
}

/*GetComponentHostgroupByID swagger:route GET /cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id} hostgroup getComponentHostgroupById

Get component Hostgroup

*/
type GetComponentHostgroupByID struct {
	Context *middleware.Context
	Handler GetComponentHostgroupByIDHandler
}

func (o *GetComponentHostgroupByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetComponentHostgroupByIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
