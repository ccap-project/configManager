// Code generated by go-swagger; DO NOT EDIT.

package hostgroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"configManager/models"
)

// AddComponentHostgroupHandlerFunc turns a function with the right signature into a add component hostgroup handler
type AddComponentHostgroupHandlerFunc func(AddComponentHostgroupParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn AddComponentHostgroupHandlerFunc) Handle(params AddComponentHostgroupParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// AddComponentHostgroupHandler interface for that can handle valid add component hostgroup params
type AddComponentHostgroupHandler interface {
	Handle(AddComponentHostgroupParams, *models.Customer) middleware.Responder
}

// NewAddComponentHostgroup creates a new http.Handler for the add component hostgroup operation
func NewAddComponentHostgroup(ctx *middleware.Context, handler AddComponentHostgroupHandler) *AddComponentHostgroup {
	return &AddComponentHostgroup{Context: ctx, Handler: handler}
}

/*AddComponentHostgroup swagger:route POST /cell/{cell_id}/component/{component_id}/hostgroup hostgroup addComponentHostgroup

Add a new hostgroup to a component

*/
type AddComponentHostgroup struct {
	Context *middleware.Context
	Handler AddComponentHostgroupHandler
}

func (o *AddComponentHostgroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddComponentHostgroupParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
