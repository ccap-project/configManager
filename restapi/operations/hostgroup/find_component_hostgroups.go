package hostgroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"../../../models"
)

// FindComponentHostgroupsHandlerFunc turns a function with the right signature into a find component hostgroups handler
type FindComponentHostgroupsHandlerFunc func(FindComponentHostgroupsParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn FindComponentHostgroupsHandlerFunc) Handle(params FindComponentHostgroupsParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// FindComponentHostgroupsHandler interface for that can handle valid find component hostgroups params
type FindComponentHostgroupsHandler interface {
	Handle(FindComponentHostgroupsParams, *models.Customer) middleware.Responder
}

// NewFindComponentHostgroups creates a new http.Handler for the find component hostgroups operation
func NewFindComponentHostgroups(ctx *middleware.Context, handler FindComponentHostgroupsHandler) *FindComponentHostgroups {
	return &FindComponentHostgroups{Context: ctx, Handler: handler}
}

/*FindComponentHostgroups swagger:route GET /cell/{cell_id}/component/{component_id}/hostgroups hostgroup findComponentHostgroups

List component Hostgroups

*/
type FindComponentHostgroups struct {
	Context *middleware.Context
	Handler FindComponentHostgroupsHandler
}

func (o *FindComponentHostgroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindComponentHostgroupsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
