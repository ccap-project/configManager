package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"../../../models"
)

// FindCellHostsHandlerFunc turns a function with the right signature into a find cell hosts handler
type FindCellHostsHandlerFunc func(FindCellHostsParams, *models.Customer) middleware.Responder

// Handle executing the request and returning a response
func (fn FindCellHostsHandlerFunc) Handle(params FindCellHostsParams, principal *models.Customer) middleware.Responder {
	return fn(params, principal)
}

// FindCellHostsHandler interface for that can handle valid find cell hosts params
type FindCellHostsHandler interface {
	Handle(FindCellHostsParams, *models.Customer) middleware.Responder
}

// NewFindCellHosts creates a new http.Handler for the find cell hosts operation
func NewFindCellHosts(ctx *middleware.Context, handler FindCellHostsHandler) *FindCellHosts {
	return &FindCellHosts{Context: ctx, Handler: handler}
}

/*FindCellHosts swagger:route GET /cell/{cell_id}/hosts host findCellHosts

Find Hosts by Cell

*/
type FindCellHosts struct {
	Context *middleware.Context
	Handler FindCellHostsHandler
}

func (o *FindCellHosts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindCellHostsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Customer
	if uprinc != nil {
		principal = uprinc.(*models.Customer) // this is really a models.Customer, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
