// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package listener

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"configManager/models"
)

// UpdateComponentListenerOKCode is the HTTP code returned for type UpdateComponentListenerOK
const UpdateComponentListenerOKCode int = 200

/*UpdateComponentListenerOK successful operation

swagger:response updateComponentListenerOK
*/
type UpdateComponentListenerOK struct {
}

// NewUpdateComponentListenerOK creates UpdateComponentListenerOK with default headers values
func NewUpdateComponentListenerOK() *UpdateComponentListenerOK {
	return &UpdateComponentListenerOK{}
}

// WriteResponse to the client
func (o *UpdateComponentListenerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateComponentListenerBadRequestCode is the HTTP code returned for type UpdateComponentListenerBadRequest
const UpdateComponentListenerBadRequestCode int = 400

/*UpdateComponentListenerBadRequest Invalid cell id or listener id

swagger:response updateComponentListenerBadRequest
*/
type UpdateComponentListenerBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewUpdateComponentListenerBadRequest creates UpdateComponentListenerBadRequest with default headers values
func NewUpdateComponentListenerBadRequest() *UpdateComponentListenerBadRequest {
	return &UpdateComponentListenerBadRequest{}
}

// WithPayload adds the payload to the update component listener bad request response
func (o *UpdateComponentListenerBadRequest) WithPayload(payload models.APIResponse) *UpdateComponentListenerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update component listener bad request response
func (o *UpdateComponentListenerBadRequest) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateComponentListenerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateComponentListenerNotFoundCode is the HTTP code returned for type UpdateComponentListenerNotFound
const UpdateComponentListenerNotFoundCode int = 404

/*UpdateComponentListenerNotFound Hostgroup does not exists

swagger:response updateComponentListenerNotFound
*/
type UpdateComponentListenerNotFound struct {
}

// NewUpdateComponentListenerNotFound creates UpdateComponentListenerNotFound with default headers values
func NewUpdateComponentListenerNotFound() *UpdateComponentListenerNotFound {
	return &UpdateComponentListenerNotFound{}
}

// WriteResponse to the client
func (o *UpdateComponentListenerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// UpdateComponentListenerInternalServerErrorCode is the HTTP code returned for type UpdateComponentListenerInternalServerError
const UpdateComponentListenerInternalServerErrorCode int = 500

/*UpdateComponentListenerInternalServerError Internal error

swagger:response updateComponentListenerInternalServerError
*/
type UpdateComponentListenerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.APIResponse `json:"body,omitempty"`
}

// NewUpdateComponentListenerInternalServerError creates UpdateComponentListenerInternalServerError with default headers values
func NewUpdateComponentListenerInternalServerError() *UpdateComponentListenerInternalServerError {
	return &UpdateComponentListenerInternalServerError{}
}

// WithPayload adds the payload to the update component listener internal server error response
func (o *UpdateComponentListenerInternalServerError) WithPayload(payload models.APIResponse) *UpdateComponentListenerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update component listener internal server error response
func (o *UpdateComponentListenerInternalServerError) SetPayload(payload models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateComponentListenerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
