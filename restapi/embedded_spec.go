// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "configManager",
    "contact": {
      "email": "alexandre@ineosystems.com.br"
    },
    "version": "0.0.1"
  },
  "host": "127.0.0.1:3000",
  "basePath": "/v1",
  "paths": {
    "/cell": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Add a new cell",
        "operationId": "addCell",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "description": "Cell object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cell"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}": {
      "get": {
        "description": "Returns a single cell",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Find cell by ID",
        "operationId": "getCellById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cell"
            }
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Updates a cell with form data",
        "operationId": "updateCellWithForm",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "type": "string",
            "description": "Updated name of the cell",
            "name": "public_key",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deletes a cell",
        "operationId": "deleteCell",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cell not found"
          }
        }
      }
    },
    "/cell/{cell_id}/component": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Add a new component",
        "operationId": "addComponent",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Component"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Get Component",
        "operationId": "getCellComponent",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Component"
            }
          },
          "400": {
            "description": "Invalid cell id or component id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/connect_to/{entity_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Add a new relationship to a component",
        "operationId": "addComponentRelationship",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/EntityID"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "component"
        ],
        "summary": "Deletes a relationship from component",
        "operationId": "DeleteComponentRelationship",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/EntityID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id, component id or entity id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Entity does not exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroup": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Add a new hostgroup to a component",
        "operationId": "AddComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Get component Hostgroup",
        "operationId": "getComponentHostgroupByID",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/HostgroupID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          },
          "400": {
            "description": "Invalid cell id or component id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Update an existing hostgroup",
        "operationId": "UpdateComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/HostgroupID"
          },
          {
            "description": "Hostgroup object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "hostgroup"
        ],
        "summary": "Deletes a hostgroup from component",
        "operationId": "DeleteComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/HostgroupID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id, component id or hostgroup id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}/connect/{network_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Connect hostgroup to network",
        "operationId": "ConnectHostgroupToNetwork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/HostgroupID"
          },
          {
            "$ref": "#/parameters/NetworkID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "hostgroup"
        ],
        "summary": "Disconnect a hostgroup from network",
        "operationId": "DisconnectHostgroupFromNetwork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/HostgroupID"
          },
          {
            "$ref": "#/parameters/NetworkID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id, component id or hostgroup id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "List component Hostgroups",
        "operationId": "findComponentHostgroups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hostgroup"
              }
            }
          },
          "400": {
            "description": "Invalid cell id or component id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/listener": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "listener"
        ],
        "summary": "Add a new listener to a component",
        "operationId": "AddComponentListener",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Listener"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/listener/{listener_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "listener"
        ],
        "summary": "Get component listener",
        "operationId": "getComponentListenerByID",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/ListenerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Listener"
            }
          },
          "400": {
            "description": "Invalid cell id or component id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "listener"
        ],
        "summary": "Update an existing listener",
        "operationId": "UpdateComponentListener",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/ListenerID"
          },
          {
            "description": "Listener object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Listener"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or listener id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "listener"
        ],
        "summary": "Deletes a listener from component",
        "operationId": "DeleteComponentListener",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "$ref": "#/parameters/ListenerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id, component id or listener id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/listeners": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "listener"
        ],
        "summary": "List component listeners",
        "operationId": "findComponentListeners",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listener"
              }
            }
          },
          "400": {
            "description": "Invalid cell id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/role": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Add a new role to a component",
        "operationId": "addComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/role/{role_name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Update an existing role",
        "operationId": "updateComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "type": "string",
            "description": "role that will be updated",
            "name": "role_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Role object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Role does not exists"
          },
          "409": {
            "description": "Role does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Delete an existing role",
        "operationId": "deleteComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          },
          {
            "type": "string",
            "description": "role that will be updated",
            "name": "role_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Role does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "List component Roles",
        "operationId": "findComponentRoles",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ComponentID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/components": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Finds Components by Cell",
        "operationId": "findCellComponents",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Component"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/deploy": {
      "get": {
        "description": "Deploy a single cell",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deploy cell by ID",
        "operationId": "deployCellById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "428": {
            "description": "Cell incomplete",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/deploy/app": {
      "get": {
        "description": "Deploy a single cell apps",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deploy cell apps by ID",
        "operationId": "deployCellAppById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "428": {
            "description": "Cell incomplete",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/full": {
      "get": {
        "description": "Returns full cell definition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Get full cell by ID",
        "operationId": "getCellFullById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCell"
            }
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/host": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "host"
        ],
        "summary": "Add a new host",
        "operationId": "addCellHost",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Host object that will be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/hosts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "host"
        ],
        "summary": "Find Hosts by Cell",
        "operationId": "findCellHosts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Host"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/keypair/{keypair_name}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Add a keypair to cell",
        "operationId": "addCellKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "type": "string",
            "description": "Name of keypair that will be used",
            "name": "keypair_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "404": {
            "description": "does not exists"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/loadbalancer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "loadbalancer"
        ],
        "summary": "Add a new loadbalancer",
        "operationId": "addLoadbalancer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Loadbalancer object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Loadbalancer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/loadbalancer/{loadbalancer_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "loadbalancer"
        ],
        "summary": "Get Loadbalancer",
        "operationId": "getCellLoadbalancer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/LoadbalancerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Loadbalancer"
            }
          },
          "400": {
            "description": "Invalid cell id or loadbalancer id"
          },
          "404": {
            "description": "loadbalancer not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/loadbalancer/{loadbalancer_id}/connect_to/{listener_id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "loadbalancer"
        ],
        "summary": "Add new relationship to the loadbalancer",
        "operationId": "addLoadbalancerRelationship",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ListenerID"
          },
          {
            "$ref": "#/parameters/LoadbalancerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "loadbalancer or component not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "loadbalancer"
        ],
        "summary": "delete loadbalancer relationship",
        "operationId": "deleteLoadbalancerRelationship",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/ListenerID"
          },
          {
            "$ref": "#/parameters/LoadbalancerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "loadbalancer or entity not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/loadbalancers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "loadbalancer"
        ],
        "summary": "Finds Loadbalancers by Cell",
        "operationId": "findCellLoadbalancers",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Loadbalancer"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "loadbalancer not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/provider": {
      "get": {
        "description": "Returns cell's provider",
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Find provider",
        "operationId": "getProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Update a provider",
        "operationId": "updateProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Provider object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Does not exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Add a new provider",
        "operationId": "addProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Provider object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/router": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "summary": "Add a new router",
        "operationId": "addRouter",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "description": "Router object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Router"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/router/{router_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "summary": "Get Router",
        "operationId": "getCellRouter",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Router"
            }
          },
          "400": {
            "description": "Invalid cell id or router id"
          },
          "404": {
            "description": "router not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "summary": "Delete Router",
        "operationId": "deleteCellRouter",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Router"
            }
          },
          "400": {
            "description": "Invalid cell id or router id"
          },
          "404": {
            "description": "router not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/router/{router_id}/network": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "Add a new network",
        "operationId": "addNetwork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          },
          {
            "description": "Network object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Network"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/router/{router_id}/network/{network_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "Get Network",
        "operationId": "getCellNetwork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          },
          {
            "$ref": "#/parameters/NetworkID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          },
          "400": {
            "description": "Invalid cell id or network id"
          },
          "404": {
            "description": "network not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "Delete Network",
        "operationId": "deleteCellNetwork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          },
          {
            "$ref": "#/parameters/NetworkID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          },
          "400": {
            "description": "Invalid cell id or network id"
          },
          "404": {
            "description": "network not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/router/{router_id}/networks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "network"
        ],
        "summary": "Finds Networks by Cell",
        "operationId": "findCellNetworks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          },
          {
            "$ref": "#/parameters/RouterID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "network not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/routers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "router"
        ],
        "summary": "Finds Routers by Cell",
        "operationId": "findCellRouters",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/CellID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Router"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "router not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cells": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Finds Cells by customer",
        "operationId": "findCellByCustomer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cell"
              }
            }
          },
          "400": {
            "description": "Invalid cell name"
          },
          "404": {
            "description": "cells not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customer": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Update an existing customer",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "description": "Customer object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Add a new customer",
        "operationId": "addCustomer",
        "parameters": [
          {
            "description": "Customer object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customer/findByName": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Finds Customer by name",
        "operationId": "findCustomerByName",
        "parameters": [
          {
            "type": "string",
            "items": {
              "type": "string"
            },
            "description": "Name that need to be considered for filter",
            "name": "customer_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid customer name"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/customer/{customerId}": {
      "get": {
        "description": "Returns a single customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Find customer by ID",
        "operationId": "getCustomerById",
        "parameters": [
          {
            "$ref": "#/parameters/CustomerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer with form data",
        "operationId": "updateCustomerWithForm",
        "parameters": [
          {
            "$ref": "#/parameters/CustomerID"
          },
          {
            "type": "string",
            "description": "Updated name of the customer",
            "name": "customer_name",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "$ref": "#/parameters/CustomerID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keypair": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Add a new keypair",
        "operationId": "addKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "description": "Keypair object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keypair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keypair/{keypair_id}": {
      "get": {
        "description": "Returns a single keypair",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Find keypair by ID",
        "operationId": "getKeypairById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/KeypairID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Keypair"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Keypair not found"
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Updates a keypair with form data",
        "operationId": "updateKeypairWithForm",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/KeypairID"
          },
          {
            "type": "string",
            "description": "Updated name of the keypair",
            "name": "public_key",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Deletes a keypair",
        "operationId": "deleteKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/KeypairID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Keypair not found"
          }
        }
      }
    },
    "/keypairs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Finds Keypair by customer",
        "operationId": "findKeypairByCustomer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Keypair"
              }
            }
          },
          "400": {
            "description": "Invalid customer id"
          },
          "404": {
            "description": "Keypair not found"
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Update an existing provider type",
        "operationId": "updateProviderType",
        "parameters": [
          {
            "description": "ProviderType object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProviderType not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Add a new provider type",
        "operationId": "addProviderType",
        "parameters": [
          {
            "description": "ProviderType object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype/{providertype_id}": {
      "get": {
        "description": "Returns a single provider type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Find provider type by ID",
        "operationId": "getProviderTypeById",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Deletes a provider type",
        "operationId": "deleteProviderType",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    },
    "/providertype/{providertype_id}/region": {
      "get": {
        "description": "Returns a single provider region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providerregion"
        ],
        "summary": "Find provider region by ID",
        "operationId": "getProviderRegionById",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderRegionID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProviderRegion"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "providerregion"
        ],
        "summary": "Add a new provider Region",
        "operationId": "addProviderRegion",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          },
          {
            "description": "ProviderRegion object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderRegion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "providerregion"
        ],
        "summary": "Deletes a provider region",
        "operationId": "deleteProviderRegion",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderRegionID"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    },
    "/providertype/{providertype_id}/region/{provider_region_id}/az": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "regionaz"
        ],
        "summary": "Add a new Region availability Zone",
        "operationId": "addRegionAZ",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          },
          {
            "$ref": "#/parameters/ProviderRegionID"
          },
          {
            "description": "Region AZ object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegionAZ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ULID"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype/{providertype_id}/region/{provider_region_id}/az/{region_az_id}": {
      "get": {
        "description": "Returns a single provider region az",
        "produces": [
          "application/json"
        ],
        "tags": [
          "regionaz"
        ],
        "summary": "Find provider region az by ID",
        "operationId": "getRegionAZById",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          },
          {
            "$ref": "#/parameters/ProviderRegionID"
          },
          {
            "$ref": "#/parameters/RegionAZID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RegionAZ"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "regionaz"
        ],
        "summary": "Deletes a region availability zone",
        "operationId": "deleteRegionAZ",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          },
          {
            "$ref": "#/parameters/ProviderRegionID"
          },
          {
            "$ref": "#/parameters/RegionAZID"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    },
    "/providertype/{providertype_id}/region/{provider_region_id}/azs": {
      "get": {
        "description": "Returns a list of region availability zones",
        "produces": [
          "application/json"
        ],
        "tags": [
          "regionaz"
        ],
        "summary": "Find region availability zone by ID",
        "operationId": "listRegionAZs",
        "parameters": [
          {
            "$ref": "#/parameters/ProviderTypeID"
          },
          {
            "$ref": "#/parameters/ProviderRegionID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RegionAZ"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype/{providertype_id}/regions": {
      "get": {
        "description": "Returns a list of provider region",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providerregion"
        ],
        "summary": "List provider regions",
        "operationId": "listProviderRegions",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderRegion"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertypes": {
      "get": {
        "description": "Returns a list of provider types",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "List provider types",
        "operationId": "listProviderTypes",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderType"
              }
            }
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AZ": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Cell": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Component": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "hostgroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hostgroup"
          }
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "listeners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listener"
          }
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "default": 99
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ULID"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EntireCell": {
      "type": "object",
      "properties": {
        "customer_name": {
          "type": "string"
        },
        "hostgroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hostgroup"
          }
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Host"
          }
        },
        "keypair": {
          "$ref": "#/definitions/Keypair"
        },
        "loadbalancers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Loadbalancer"
          }
        },
        "name": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Network"
          }
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        },
        "routers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Router"
          }
        },
        "securitygroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Securitygroup"
          }
        }
      }
    },
    "FullCell": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Component"
          }
        },
        "customer_name": {
          "type": "string"
        },
        "keypair": {
          "$ref": "#/definitions/Keypair"
        },
        "loadbalancers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Loadbalancer"
          }
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        }
      }
    },
    "Host": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        }
      }
    },
    "Hostgroup": {
      "type": "object",
      "required": [
        "name",
        "image",
        "flavor",
        "username",
        "desired_size",
        "network"
      ],
      "properties": {
        "bootstrap_command": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "cooldown_interval": {
          "type": "integer"
        },
        "desired_size": {
          "type": "integer"
        },
        "flavor": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "image": {
          "type": "string"
        },
        "listeners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Listener"
          }
        },
        "max_size": {
          "type": "integer"
        },
        "min_size": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "order": {
          "type": "integer",
          "default": 99
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "securitygroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        },
        "wait_for_instances": {
          "type": "boolean"
        }
      }
    },
    "Keypair": {
      "type": "object",
      "required": [
        "name",
        "public_key"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        }
      }
    },
    "Listener": {
      "type": "object",
      "required": [
        "name",
        "port",
        "protocol"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "udp"
          ]
        }
      }
    },
    "Loadbalancer": {
      "type": "object",
      "required": [
        "name",
        "port",
        "protocol",
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "connection_drain": {
          "type": "string"
        },
        "connection_idle_timeout": {
          "type": "integer"
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "http",
            "https",
            "tls"
          ]
        },
        "router": {
          "type": "string"
        },
        "securitygroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Network": {
      "type": "object",
      "required": [
        "name",
        "cidr",
        "region_az"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "example": "192.168.100.0/24"
        },
        "id": {
          "$ref": "#/definitions/ULID",
          "example": "01C8KJMMYHPKYNXWWZFWQ61D0Z"
        },
        "name": {
          "type": "string",
          "example": "test_network"
        },
        "region_az": {
          "type": "string"
        },
        "router": {
          "type": "string"
        }
      }
    },
    "Parameter": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Provider": {
      "type": "object",
      "properties": {
        "access_key": {
          "type": "string"
        },
        "auth_url": {
          "type": "string"
        },
        "domain_name": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "tenant_name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ProviderRegion": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ProviderType": {
      "type": "object",
      "properties": {
        "access_key": {
          "type": "string"
        },
        "auth_url": {
          "type": "string"
        },
        "domain_name": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "RegionAZ": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "component_id": {
          "$ref": "#/definitions/ULID"
        },
        "listener_id": {
          "$ref": "#/definitions/ULID"
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "name",
        "url",
        "version"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "default": 99
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Router": {
      "type": "object",
      "required": [
        "name",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "type": "string"
        },
        "enable_dns": {
          "type": "boolean"
        },
        "enable_dns_hostname": {
          "type": "boolean"
        },
        "id": {
          "$ref": "#/definitions/ULID"
        },
        "name": {
          "type": "string",
          "example": "test_router"
        }
      }
    },
    "Securitygroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "router": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Securityrule"
          }
        }
      }
    },
    "Securityrule": {
      "type": "object",
      "properties": {
        "destination_addr": {
          "type": "string"
        },
        "destination_port": {
          "type": "string"
        },
        "destination_securitygroup": {
          "type": "string"
        },
        "ethertype": {
          "type": "string"
        },
        "proto": {
          "type": "string"
        },
        "source_addr": {
          "type": "string"
        },
        "source_port": {
          "type": "string"
        },
        "source_securitygroup": {
          "type": "string"
        }
      }
    },
    "ULID": {
      "type": "string",
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$"
    }
  },
  "parameters": {
    "CellID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Cell ID",
      "name": "cell_id",
      "in": "path",
      "required": true
    },
    "ComponentID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Component ID",
      "name": "component_id",
      "in": "path",
      "required": true
    },
    "CustomerID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Customer ID",
      "name": "customer_id",
      "in": "path",
      "required": true
    },
    "EntityID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Entity ID",
      "name": "entity_id",
      "in": "path",
      "required": true
    },
    "HostgroupID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Hostgroup ID",
      "name": "hostgroup_id",
      "in": "path",
      "required": true
    },
    "KeypairID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "KeypairID",
      "name": "keypair_id",
      "in": "path",
      "required": true
    },
    "ListenerID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "ListenerID",
      "name": "listener_id",
      "in": "path",
      "required": true
    },
    "LoadbalancerID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "LoadbalancerID",
      "name": "loadbalancer_id",
      "in": "path",
      "required": true
    },
    "NetworkID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "NetworkID",
      "name": "network_id",
      "in": "path",
      "required": true
    },
    "ProviderRegionID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Provider Region ID",
      "name": "provider_region_id",
      "in": "path",
      "required": true
    },
    "ProviderTypeID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "ProvidertypeID",
      "name": "providertype_id",
      "in": "path",
      "required": true
    },
    "RegionAZID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "Region AZ ID",
      "name": "region_az_id",
      "in": "path",
      "required": true
    },
    "RouterID": {
      "maxLength": 26,
      "minLength": 26,
      "pattern": "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$",
      "type": "string",
      "description": "RouterID",
      "name": "router_id",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "x-api-token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Everything about the Customer",
      "name": "customer",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "cell"
    },
    {
      "name": "component"
    },
    {
      "name": "host"
    },
    {
      "name": "keypair"
    },
    {
      "name": "listener"
    },
    {
      "name": "loadbalancer"
    },
    {
      "name": "provider"
    },
    {
      "name": "providertype"
    },
    {
      "name": "role"
    },
    {
      "name": "roleversion"
    }
  ]
}`))
}
