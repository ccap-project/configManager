// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "configManager",
    "contact": {
      "email": "alexandre@ineosystems.com.br"
    },
    "version": "0.0.1"
  },
  "host": "127.0.0.1:3000",
  "basePath": "/v1",
  "paths": {
    "/cell": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Add a new cell",
        "operationId": "addCell",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "description": "Cell object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cell"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}": {
      "get": {
        "description": "Returns a single cell",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Find cell by ID",
        "operationId": "getCellById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell to return",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cell"
            }
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Updates a cell with form data",
        "operationId": "updateCellWithForm",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that needs to be updated",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the cell",
            "name": "public_key",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deletes a cell",
        "operationId": "deleteCell",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Cell id to delete",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cell not found"
          }
        }
      }
    },
    "/cell/{cell_id}/component": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Add a new component",
        "operationId": "addComponent",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Component"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Get Component",
        "operationId": "getCellComponent",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that needs to be updated",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Component"
            }
          },
          "400": {
            "description": "Invalid cell id or component id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroup": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Add a new hostgroup to a component",
        "operationId": "AddComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroup/{hostgroup_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Get component Hostgroup",
        "operationId": "getComponentHostgroupByID",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of hostgroup that will be used",
            "name": "hostgroup_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          },
          "400": {
            "description": "Invalid cell id or component id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "404": {
            "description": "hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "Update an existing hostgroup",
        "operationId": "UpdateComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "hostgroup that will be updated",
            "name": "hostgroup_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Hostgroup object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hostgroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "hostgroup"
        ],
        "summary": "Deletes a hostgroup from component",
        "operationId": "DeleteComponentHostgroup",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "hostgroup that will be deleted",
            "name": "hostgroup_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id, component id or hostgroup id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Hostgroup does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/hostgroups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "hostgroup"
        ],
        "summary": "List component Hostgroups",
        "operationId": "findComponentHostgroups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hostgroup"
              }
            }
          },
          "400": {
            "description": "Invalid cell id or component id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/role": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Add a new role to a component",
        "operationId": "addComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Component object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/role/{role_name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Update an existing role",
        "operationId": "updateComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role that will be updated",
            "name": "role_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Role object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Role does not exists"
          },
          "409": {
            "description": "Role does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "Delete an existing role",
        "operationId": "deleteComponentRole",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role that will be updated",
            "name": "role_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Role does not exists"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/component/{component_id}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "role"
        ],
        "summary": "List component Roles",
        "operationId": "findComponentRoles",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of component that will be used",
            "name": "component_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "400": {
            "description": "Invalid cell id or role id",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/components": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "component"
        ],
        "summary": "Finds Components by Cell",
        "operationId": "findCellComponents",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that needs to be updated",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Component"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/deploy": {
      "get": {
        "description": "Deploy a single cell",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deploy cell by ID",
        "operationId": "deployCellById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell to return",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/deploy/app": {
      "get": {
        "description": "Deploy a single cell apps",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Deploy cell apps by ID",
        "operationId": "deployCellAppById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell to return",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "204": {
            "description": "no content"
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/full": {
      "get": {
        "description": "Returns full cell definition",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Get full cell by ID",
        "operationId": "getCellFullById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell to return",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCell"
            }
          },
          "404": {
            "description": "Cell not found"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/host": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "host"
        ],
        "summary": "Add a new host",
        "operationId": "addCellHost",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Host object that will be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/hosts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "host"
        ],
        "summary": "Find Hosts by Cell",
        "operationId": "findCellHosts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Host"
              }
            }
          },
          "400": {
            "description": "Invalid cell id"
          },
          "404": {
            "description": "component not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/keypair/{keypair_name}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Add a keypair to cell",
        "operationId": "addCellKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of keypair that will be used",
            "name": "keypair_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "description": "does not exists"
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cell/{cell_id}/provider": {
      "get": {
        "description": "Returns cell's provider",
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Find provider",
        "operationId": "getProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Update a provider",
        "operationId": "updateProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Provider object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Does not exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "provider"
        ],
        "summary": "Add a new provider",
        "operationId": "addProvider",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of cell that will be used",
            "name": "cell_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Provider object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Provider"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cells": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cell"
        ],
        "summary": "Finds Cells by customer",
        "operationId": "findCellByCustomer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cell"
              }
            }
          },
          "400": {
            "description": "Invalid cell name"
          },
          "404": {
            "description": "cells not found"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customer": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Update an existing customer",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "description": "Customer object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Add a new customer",
        "operationId": "addCustomer",
        "parameters": [
          {
            "description": "Customer object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customer/findByName": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Finds Customer by name",
        "operationId": "findCustomerByName",
        "parameters": [
          {
            "type": "string",
            "items": {
              "type": "string"
            },
            "description": "Name that need to be considered for filter",
            "name": "customer_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid customer name"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/customer/{customerId}": {
      "get": {
        "description": "Returns a single customer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Find customer by ID",
        "operationId": "getCustomerById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of customer to return",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer with form data",
        "operationId": "updateCustomerWithForm",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of customer that needs to be updated",
            "name": "customerId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the customer",
            "name": "customer_name",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Customer id to delete",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/keypair": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Update an existing keypair",
        "operationId": "updateKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "description": "Keypair object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keypair"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Keypair not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Add a new keypair",
        "operationId": "addKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "description": "Keypair object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keypair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer"
            }
          },
          "405": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/keypair/{keypair_id}": {
      "get": {
        "description": "Returns a single keypair",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Find keypair by ID",
        "operationId": "getKeypairById",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of keypair to return",
            "name": "keypair_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Keypair"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Keypair not found"
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Updates a keypair with form data",
        "operationId": "updateKeypairWithForm",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of keypair that needs to be updated",
            "name": "keypair_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the keypair",
            "name": "public_key",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Deletes a keypair",
        "operationId": "deleteKeypair",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Keypair id to delete",
            "name": "keypair_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Keypair not found"
          }
        }
      }
    },
    "/keypairs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "keypair"
        ],
        "summary": "Finds Keypair by customer",
        "operationId": "findKeypairByCustomer",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Keypair"
              }
            }
          },
          "400": {
            "description": "Invalid customer id"
          },
          "404": {
            "description": "Keypair not found"
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Update an existing provider type",
        "operationId": "updateProviderType",
        "parameters": [
          {
            "description": "ProviderType object that needs to be updated",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProviderType not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Add a new provider type",
        "operationId": "addProviderType",
        "parameters": [
          {
            "description": "ProviderType object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already exists",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProviderTypeID"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/providertype/{providertype_id}": {
      "get": {
        "description": "Returns a single provider type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Find provider type by ID",
        "operationId": "getProviderTypeById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of providertype to return",
            "name": "providertype_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProviderType"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "Deletes a provider type",
        "operationId": "deleteProviderType",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Provider type id to delete",
            "name": "providertype_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    },
    "/providertypes": {
      "get": {
        "description": "Returns a list of provider types",
        "produces": [
          "application/json"
        ],
        "tags": [
          "providertype"
        ],
        "summary": "List provider types",
        "operationId": "listProviderTypes",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderType"
              }
            }
          },
          "500": {
            "description": "InternalError",
            "schema": {
              "$ref": "#definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Cell": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Component": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "hostgroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hostgroup"
          }
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EntireCell": {
      "type": "object",
      "properties": {
        "customer_name": {
          "type": "string"
        },
        "hostgroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hostgroup"
          }
        },
        "hosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Host"
          }
        },
        "keypair": {
          "$ref": "#/definitions/Keypair"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        }
      }
    },
    "FullCell": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Component"
          }
        },
        "customer_name": {
          "type": "string"
        },
        "keypair": {
          "$ref": "#/definitions/Keypair"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/Provider"
        }
      }
    },
    "Host": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        }
      }
    },
    "Hostgroup": {
      "type": "object",
      "required": [
        "name",
        "image",
        "flavor",
        "username",
        "count",
        "network"
      ],
      "properties": {
        "bootstrap_command": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "flavor": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "default": 99
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Keypair": {
      "type": "object",
      "required": [
        "name",
        "public_key"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        }
      }
    },
    "Parameter": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Provider": {
      "type": "object",
      "required": [
        "name",
        "domain_name",
        "auth_url",
        "tenant_name",
        "username",
        "password",
        "type"
      ],
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "domain_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "tenant_name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ProviderType": {
      "type": "object",
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "domain_name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ProviderTypeID": {
      "type": "string"
    },
    "Role": {
      "type": "object",
      "required": [
        "name",
        "url",
        "version"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "default": 99
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "x-api-token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Everything about the Customer",
      "name": "customer",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "cell"
    },
    {
      "name": "component"
    },
    {
      "name": "host"
    },
    {
      "name": "keypair"
    },
    {
      "name": "provider"
    },
    {
      "name": "providertype"
    },
    {
      "name": "role"
    },
    {
      "name": "roleversion"
    }
  ]
}`))
}
