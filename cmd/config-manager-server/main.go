// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2016, 2017, 2018 Alexandre Biancalana <ale@biancalanas.net>.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package main

import (
	"os"

	"configManager"

	"configManager/handlers"
	"configManager/models"
	"configManager/restapi"
	"configManager/restapi/operations"

	"github.com/Sirupsen/logrus"
	app "github.com/casualjim/go-app"
	"github.com/casualjim/middlewares"
	"github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	flags "github.com/jessevdk/go-flags"
	"github.com/justinas/alice"
)

func main() {

	app, err := app.New("configManager")
	if err != nil {
		logrus.Fatalln(err)
	}

	log := app.Logger()
	cfg := app.Config()

	//log.SetFlags(log.LstdFlags | log.Lshortfile)

	cfg.SetDefault("db.Host", "127.0.0.1")
	cfg.SetDefault("db.Port", "7687")
	cfg.SetDefault("db.MaxConn", "20")
	cfg.SetDefault("service.Host", "127.0.0.1")
	cfg.SetDefault("service.Port", "8081")

	rt, err := configManager.NewRuntime(app)
	if err != nil {
		log.Fatalln(err)
	}

	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewConfigManagerAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	server.Host = app.Config().GetString("service.Host")
	server.Port = app.Config().GetInt("service.Port")

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "configManager"
	parser.LongDescription = swaggerSpec.Spec().Info.Description

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	/*
	 * App Handlers
	 */

	// Cell
	api.CellAddCellHandler = handlers.NewAddCell(rt)
	api.CellFindCellByCustomerHandler = handlers.NewFindCellByCustomer(rt)
	api.CellGetCellByIDHandler = handlers.NewGetCellByID(rt)
	api.CellGetCellFullByIDHandler = handlers.NewGetCellFullByID(rt)

	// Component
	api.ComponentAddComponentHandler = handlers.NewAddCellComponent(rt)
	api.ComponentGetCellComponentHandler = handlers.NewGetCellComponent(rt)
	api.ComponentFindCellComponentsHandler = handlers.NewFindCellComponents(rt)

	// Component Relationship
	api.ComponentAddComponentRelationshipHandler = handlers.NewAddCellComponentRelationship(rt)
	api.ComponentDeleteComponentRelationshipHandler = handlers.NewDeleteCellComponentRelationship(rt)

	// Customer
	api.CustomerAddCustomerHandler = handlers.NewAddCustomer(rt)
	api.CustomerDeleteCustomerHandler = handlers.NewDeleteCustomer(rt)
	api.CustomerFindCustomerByNameHandler = handlers.NewFindCustomerByName(rt)

	// Deploy
	api.CellDeployCellByIDHandler = handlers.NewDeployCellByID(rt)
	api.CellDeployCellAppByIDHandler = handlers.NewDeployCellAppByID(rt)

	// Host
	api.HostAddCellHostHandler = handlers.NewAddCellHost(rt)

	// Hostgroup
	api.HostgroupAddComponentHostgroupHandler = handlers.NewAddComponentHostgroup(rt)
	api.HostgroupDeleteComponentHostgroupHandler = handlers.NewDeleteComponentHostgroup(rt)
	api.HostgroupFindComponentHostgroupsHandler = handlers.NewFindComponentHostgroups(rt)
	api.HostgroupGetComponentHostgroupByIDHandler = handlers.NewGetComponentHostgroupByID(rt)
	api.HostgroupUpdateComponentHostgroupHandler = handlers.NewUpdateComponentHostgroup(rt)
	api.HostgroupConnectHostgroupToNetworkHandler = handlers.NewConnectHostgroupToNetwork(rt)
	api.HostgroupDisconnectHostgroupFromNetworkHandler = handlers.NewDisconnectHostgroupFromNetwork(rt)

	// Key Pair
	api.KeypairAddKeypairHandler = handlers.NewAddKeypair(rt)
	api.KeypairGetKeypairByIDHandler = handlers.NewGetKeypairByID(rt)
	api.KeypairFindKeypairByCustomerHandler = handlers.NewFindKeypairByCustomer(rt)
	api.KeypairAddCellKeypairHandler = handlers.NewAddCellKeypair(rt)

	// Listener
	api.ListenerAddComponentListenerHandler = handlers.NewAddComponentListener(rt)
	api.ListenerDeleteComponentListenerHandler = handlers.NewDeleteComponentListener(rt)
	api.ListenerFindComponentListenersHandler = handlers.NewFindComponentListeners(rt)
	api.ListenerGetComponentListenerByIDHandler = handlers.NewGetComponentListenerByID(rt)
	api.ListenerUpdateComponentListenerHandler = handlers.NewUpdateComponentListener(rt)

	// Loadbalancer
	api.LoadbalancerAddLoadbalancerHandler = handlers.NewAddCellLoadbalancer(rt)
	api.LoadbalancerGetCellLoadbalancerHandler = handlers.NewGetCellLoadbalancer(rt)
	api.LoadbalancerFindCellLoadbalancersHandler = handlers.NewFindCellLoadbalancers(rt)

	// Loadbalancer Relationship
	api.LoadbalancerAddLoadbalancerRelationshipHandler = handlers.NewAddLoadbalancerRelationship(rt)
	api.LoadbalancerDeleteLoadbalancerRelationshipHandler = handlers.NewDeleteLoadbalancerRelationship(rt)

	// Network
	api.NetworkAddNetworkHandler = handlers.NewAddCellNetwork(rt)
	api.NetworkDeleteCellNetworkHandler = handlers.NewDeleteCellNetwork(rt)
	api.NetworkGetCellNetworkHandler = handlers.NewGetCellNetwork(rt)
	api.NetworkFindCellNetworksHandler = handlers.NewFindCellNetworks(rt)

	// Provider
	api.ProviderAddProviderHandler = handlers.NewAddProvider(rt)
	api.ProviderGetProviderHandler = handlers.NewGetProvider(rt)
	api.ProviderUpdateProviderHandler = handlers.NewUpdateProvider(rt)

	// Provider Type
	api.ProvidertypeAddProviderTypeHandler = handlers.NewAddProviderType(rt)
	api.ProvidertypeGetProviderTypeByIDHandler = handlers.NewGetProviderTypeByID(rt)
	api.ProvidertypeListProviderTypesHandler = handlers.NewListProviderTypes(rt)

	// Provider Region
	api.ProviderregionAddProviderRegionHandler = handlers.NewAddProviderRegion(rt)
	api.ProviderregionGetProviderRegionByIDHandler = handlers.NewGetProviderRegionByID(rt)
	api.ProviderregionListProviderRegionsHandler = handlers.NewListProviderRegions(rt)

	// Region AZ
	api.RegionazAddRegionAZHandler = handlers.NewAddRegionAZ(rt)
	api.RegionazGetRegionAZByIDHandler = handlers.NewGetRegionAZByID(rt)
	api.RegionazListRegionAZsHandler = handlers.NewListRegionAZs(rt)

	// Roles
	api.RoleAddComponentRoleHandler = handlers.NewAddComponentRole(rt)
	api.RoleDeleteComponentRoleHandler = handlers.NewDeleteComponentRole(rt)
	api.RoleFindComponentRolesHandler = handlers.NewFindComponentRoles(rt)
	api.RoleUpdateComponentRoleHandler = handlers.NewUpdateComponentRole(rt)

	// Other Handlers
	api.JSONConsumer = runtime.JSONConsumer()

	api.UrlformConsumer = runtime.DiscardConsumer

	api.JSONProducer = runtime.JSONProducer()

	// Applies when the "x-api-token" header is set
	api.APIKeyHeaderAuth = func(token string) (*models.Customer, error) {

		Customer := new(models.Customer)
		Customer.Name = new(string)
		*Customer.Name = "customer1"
		Customer.ID = "01AN4Z07BY79KA1307SR9X4MV3"

		return Customer, nil
		return nil, errors.NotImplemented("api key auth (APIKeyHeader) x-api-token from header param [x-api-token] has not yet been implemented")
	}

	// Create initial data
	handlers.InitProviderType(rt)
	//server.ConfigureAPI()

	handler := alice.New(
		middlewares.NewRecoveryMW(app.Info().Name, log),
		middlewares.NewAuditMW(app.Info(), log),
		middlewares.NewProfiler,
		middlewares.NewHealthChecksMW(app.Info().BasePath),
	).Then(api.Serve(nil))

	server.SetHandler(handler)

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
}
